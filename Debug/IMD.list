
IMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004378  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080045e0  080045e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045e0  080045e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080045ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000074  08004660  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004660  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105d9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024dd  00000000  00000000  00030676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00032b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  00033518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9b2  00000000  00000000  00033e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1a2  00000000  00000000  000517b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3b56  00000000  00000000  0005b954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff4aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e4  00000000  00000000  000ff500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08004544 	.word	0x08004544

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08004544 	.word	0x08004544

08000224 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	6839      	ldr	r1, [r7, #0]
 8000232:	4618      	mov	r0, r3
 8000234:	f001 f999 	bl	800156a <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6839      	ldr	r1, [r7, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f001 f9a2 	bl	8001598 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <_ZN9Publisher6notifyEv>:
    void notify() {
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000264:	2300      	movs	r3, #0
 8000266:	73fb      	strb	r3, [r7, #15]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f9ce 	bl	800160c <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	7bfb      	ldrb	r3, [r7, #15]
 8000276:	4293      	cmp	r3, r2
 8000278:	bf34      	ite	cc
 800027a:	2301      	movcc	r3, #1
 800027c:	2300      	movcs	r3, #0
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2b00      	cmp	r3, #0
 8000282:	d00e      	beq.n	80002a2 <_ZN9Publisher6notifyEv+0x46>
          subscriber[i]->notify();
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	7bfa      	ldrb	r2, [r7, #15]
 8000288:	4611      	mov	r1, r2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f9ca 	bl	8001624 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8000290:	4603      	mov	r3, r0
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	4618      	mov	r0, r3
 8000298:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	3301      	adds	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e7e2      	b.n	8000268 <_ZN9Publisher6notifyEv+0xc>
      }
    }
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <_ZN9PublisherC1Ev>:
struct Publisher
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b082      	sub	sp, #8
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f9c3 	bl	8001640 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ffeb 	bl	80002aa <_ZN9PublisherC1Ev>
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffdd 	bl	80002aa <_ZN9PublisherC1Ev>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3334      	adds	r3, #52	; 0x34
 80002f4:	2234      	movs	r2, #52	; 0x34
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f004 f8d7 	bl	80044ac <memset>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3334      	adds	r3, #52	; 0x34
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ffde 	bl	80002c4 <_ZN11TickUpdater7SubtickC1Ev>
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	669a      	str	r2, [r3, #104]	; 0x68
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2201      	movs	r2, #1
 8000312:	66da      	str	r2, [r3, #108]	; 0x6c
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <_ZN11TickUpdaterC1Ev+0x44>)
 8000316:	f001 f99d 	bl	8001654 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000090 	.word	0x20000090

08000328 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <HAL_IncTick+0x10>)
 800032e:	f000 f890 	bl	8000452 <_ZN11TickUpdater9interruptEv>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000094 	.word	0x20000094

0800033c <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	f083 0301 	eor.w	r3, r3, #1
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b00      	cmp	r3, #0
 8000350:	d007      	beq.n	8000362 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2201      	movs	r2, #1
 8000356:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4619      	mov	r1, r3
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <_ZN14TickSubscriber9subscribeEv+0x30>)
 800035e:	f7ff ff61 	bl	8000224 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000094 	.word	0x20000094

08000370 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d007      	beq.n	8000390 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4619      	mov	r1, r3
 800038a:	4803      	ldr	r0, [pc, #12]	; (8000398 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 800038c:	f7ff ff58 	bl	8000240 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000094 	.word	0x20000094

0800039c <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <_ZN10SubscriberC1Ev+0x1c>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	080045b8 	.word	0x080045b8

080003bc <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ffe8 	bl	800039c <_ZN10SubscriberC1Ev>
 80003cc:	4a03      	ldr	r2, [pc, #12]	; (80003dc <_ZN14TickSubscriberC1Ev+0x20>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	080045ac 	.word	0x080045ac

080003e0 <_ZN5TimerC1Em>:
public:
  Timer(){
    time_passed = 0;
    subscribed = false;
  };
  Timer(uint32_t ms){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ffe5 	bl	80003bc <_ZN14TickSubscriberC1Ev>
 80003f2:	4a09      	ldr	r2, [pc, #36]	; (8000418 <_ZN5TimerC1Em+0x38>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2200      	movs	r2, #0
 8000402:	711a      	strb	r2, [r3, #4]
    start(ms);
 8000404:	6839      	ldr	r1, [r7, #0]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 f834 	bl	8000474 <_ZN5Timer5startEm>
  }
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4618      	mov	r0, r3
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	080045a0 	.word	0x080045a0

0800041c <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    time_passed++;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	609a      	str	r2, [r3, #8]
  }
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
        notify();
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff09 	bl	800025c <_ZN9Publisher6notifyEv>
    });
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <_ZN11TickUpdater9interruptEv>:
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b082      	sub	sp, #8
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4619      	mov	r1, r3
 8000468:	f001 f90a 	bl	8001680 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	60da      	str	r2, [r3, #12]
   subscribe();
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ff55 	bl	800033c <_ZN14TickSubscriber9subscribeEv>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <_ZN5Timer5eventEv>:

bool Timer::event()
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	689a      	ldr	r2, [r3, #8]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	bf2c      	ite	cs
 80004ae:	2301      	movcs	r3, #1
 80004b0:	2300      	movcc	r3, #0
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d004      	beq.n	80004c2 <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
      return (true);
 80004be:	2301      	movs	r3, #1
 80004c0:	e000      	b.n	80004c4 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 80004c2:	2300      	movs	r3, #0
  }
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff46 	bl	8000370 <_ZN14TickSubscriber11unsubscribeEv>
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	bf2c      	ite	cs
 8000500:	2301      	movcs	r3, #1
 8000502:	2300      	movcc	r3, #0
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	601a      	str	r2, [r3, #0]
    }
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4610      	mov	r0, r2
 8000540:	4798      	blx	r3
    }
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <_ZN4ADC_22adc_injected_interruptEv>:
	uint16_t new_leak_value{0};

	uint16_t case_value{0};
	uint16_t leak_value{0};

	void adc_injected_interrupt() {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000554:	481c      	ldr	r0, [pc, #112]	; (80005c8 <_ZN4ADC_22adc_injected_interruptEv+0x7c>)
 8000556:	f001 ff77 	bl	8002448 <HAL_ADCEx_InjectedStop_IT>
		new_case_value = HAL_ADCEx_InjectedGetValue(&hadc2, CASE);
 800055a:	2102      	movs	r1, #2
 800055c:	481a      	ldr	r0, [pc, #104]	; (80005c8 <_ZN4ADC_22adc_injected_interruptEv+0x7c>)
 800055e:	f001 ffbd 	bl	80024dc <HAL_ADCEx_InjectedGetValue>
 8000562:	4603      	mov	r3, r0
 8000564:	b29a      	uxth	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	829a      	strh	r2, [r3, #20]
		new_leak_value = HAL_ADCEx_InjectedGetValue(&hadc2, LEAK);
 800056a:	2101      	movs	r1, #1
 800056c:	4816      	ldr	r0, [pc, #88]	; (80005c8 <_ZN4ADC_22adc_injected_interruptEv+0x7c>)
 800056e:	f001 ffb5 	bl	80024dc <HAL_ADCEx_InjectedGetValue>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	82da      	strh	r2, [r3, #22]

		case_value += (new_case_value - case_value) / 4;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	8b1a      	ldrh	r2, [r3, #24]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	8a9b      	ldrh	r3, [r3, #20]
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	8b1b      	ldrh	r3, [r3, #24]
 8000588:	1acb      	subs	r3, r1, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	da00      	bge.n	8000590 <_ZN4ADC_22adc_injected_interruptEv+0x44>
 800058e:	3303      	adds	r3, #3
 8000590:	109b      	asrs	r3, r3, #2
 8000592:	b29b      	uxth	r3, r3
 8000594:	4413      	add	r3, r2
 8000596:	b29a      	uxth	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	831a      	strh	r2, [r3, #24]
		leak_value += (new_leak_value - leak_value) / 4;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	8b5a      	ldrh	r2, [r3, #26]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	8adb      	ldrh	r3, [r3, #22]
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	8b5b      	ldrh	r3, [r3, #26]
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	da00      	bge.n	80005b2 <_ZN4ADC_22adc_injected_interruptEv+0x66>
 80005b0:	3303      	adds	r3, #3
 80005b2:	109b      	asrs	r3, r3, #2
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4413      	add	r3, r2
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	835a      	strh	r2, [r3, #26]
	}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000104 	.word	0x20000104

080005cc <_ZN12InterruptingC1Ev>:
struct Interrupting
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <_ZN12InterruptingC1Ev+0x1c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	08004594 	.word	0x08004594

080005ec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffe7 	bl	80005cc <_ZN12InterruptingC1Ev>
 80005fe:	4a09      	ldr	r2, [pc, #36]	; (8000624 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff7c 	bl	8000510 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08004588 	.word	0x08004588

08000628 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff89 	bl	800054c <_ZN4ADC_22adc_injected_interruptEv>
		}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <_ZN4ADC_C1ER9Interruptt>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_injected_callback, uint16_t time_refresh)
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af02      	add	r7, sp, #8
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	4613      	mov	r3, r2
 8000650:	80fb      	strh	r3, [r7, #6]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , time_refresh {time_refresh}
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff feb1 	bl	80003bc <_ZN14TickSubscriberC1Ev>
 800065a:	4a33      	ldr	r2, [pc, #204]	; (8000728 <_ZN4ADC_C1ER9Interruptt+0xe4>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	601a      	str	r2, [r3, #0]
    : adc_callback {adc_callback}
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	689a      	ldr	r2, [r3, #8]
    , time_refresh {time_refresh}
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	821a      	strh	r2, [r3, #16]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2200      	movs	r2, #0
 8000678:	825a      	strh	r2, [r3, #18]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2200      	movs	r2, #0
 800067e:	829a      	strh	r2, [r3, #20]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2200      	movs	r2, #0
 8000684:	82da      	strh	r2, [r3, #22]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2200      	movs	r2, #0
 800068a:	831a      	strh	r2, [r3, #24]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2200      	movs	r2, #0
 8000690:	835a      	strh	r2, [r3, #26]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	331c      	adds	r3, #28
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffa7 	bl	80005ec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f103 0118 	add.w	r1, r3, #24
 80006aa:	2300      	movs	r3, #0
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	f44f 734b 	mov.w	r3, #812	; 0x32c
 80006b2:	f240 322a 	movw	r2, #810	; 0x32a
 80006b6:	f001 f804 	bl	80016c2 <_ZN10HysteresisIttEC1ERKtttb>
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f103 0118 	add.w	r1, r3, #24
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	f240 23e6 	movw	r3, #742	; 0x2e6
 80006ce:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80006d2:	f000 fff6 	bl	80016c2 <_ZN10HysteresisIttEC1ERKtttb>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f103 011a 	add.w	r1, r3, #26
 80006e2:	2300      	movs	r3, #0
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	23fa      	movs	r3, #250	; 0xfa
 80006e8:	22f0      	movs	r2, #240	; 0xf0
 80006ea:	f000 ffea 	bl	80016c2 <_ZN10HysteresisIttEC1ERKtttb>
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f103 011a 	add.w	r1, r3, #26
 80006fa:	2300      	movs	r3, #0
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	f44f 735c 	mov.w	r3, #880	; 0x370
 8000702:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000706:	f000 ffdc 	bl	80016c2 <_ZN10HysteresisIttEC1ERKtttb>
	{
		subscribed = false;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <_ZN4ADC_C1ER9Interruptt+0xda>
		  subscribe();
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fe0f 	bl	800033c <_ZN14TickSubscriber9subscribeEv>
	}
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	0800457c 	.word	0x0800457c

0800072c <_ZN4ADC_6notifyEv>:

	void notify(){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8a5b      	ldrh	r3, [r3, #18]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	b291      	uxth	r1, r2
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	8251      	strh	r1, [r2, #18]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	8a12      	ldrh	r2, [r2, #16]
 8000744:	4293      	cmp	r3, r2
 8000746:	bf2c      	ite	cs
 8000748:	2301      	movcs	r3, #1
 800074a:	2300      	movcc	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d005      	beq.n	800075e <_ZN4ADC_6notifyEv+0x32>
		   time = 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	825a      	strh	r2, [r3, #18]
		   HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <_ZN4ADC_6notifyEv+0x3c>)
 800075a:	f001 fde7 	bl	800232c <HAL_ADCEx_InjectedStart_IT>
		}
	}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000104 	.word	0x20000104

0800076c <_ZN4ADC_5startEv>:

	void start(){ subscribe()  ;}
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fde0 	bl	800033c <_ZN14TickSubscriber9subscribeEv>
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <_ZN4ADC_4stopEv>:
	void stop (){ unsubscribe();}
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fdee 	bl	8000370 <_ZN14TickSubscriber11unsubscribeEv>
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <_ZN4ADC_8lk_valueEv>:

	uint16_t lk_value(){ return leak_value; }
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	8b5b      	ldrh	r3, [r3, #26]
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <_ZN4ADC_8kz_valueEv>:
	uint16_t kz_value(){ return case_value; }
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8b1b      	ldrh	r3, [r3, #24]
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <HAL_ADCEx_InjectedConvCpltCallback>:

};

Interrupt adc_injected_callback;

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d102      	bne.n	80007e0 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 80007dc:	f7ff fea5 	bl	800052a <_ZN9Interrupt9interruptEv>
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40012800 	.word	0x40012800
 80007ec:	2000015c 	.word	0x2000015c

080007f0 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	4613      	mov	r3, r2
 80007fc:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	88fa      	ldrh	r2, [r7, #6]
 8000808:	809a      	strh	r2, [r3, #4]
	  }
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	889b      	ldrh	r3, [r3, #4]
 8000826:	2201      	movs	r2, #1
 8000828:	4619      	mov	r1, r3
 800082a:	f003 f92a 	bl	8003a82 <HAL_GPIO_WritePin>
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	889b      	ldrh	r3, [r3, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	f003 f91a 	bl	8003a82 <HAL_GPIO_WritePin>
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	889b      	ldrh	r3, [r3, #4]
 8000866:	4619      	mov	r1, r3
 8000868:	4610      	mov	r0, r2
 800086a:	f003 f8f3 	bl	8003a54 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_ZN3Pin6toggleEv>:

	  void toggle() {
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_TogglePin(port, n);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	889b      	ldrh	r3, [r3, #4]
 8000892:	4619      	mov	r1, r3
 8000894:	4610      	mov	r0, r2
 8000896:	f003 f90c 	bl	8003ab2 <HAL_GPIO_TogglePin>
	  }
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_ZN3PinaSEb>:

	  bool operator=(bool v)
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <_ZN3PinaSEb+0x1a>
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ffae 	bl	8000816 <_ZN3Pin3setEv>
 80008ba:	e002      	b.n	80008c2 <_ZN3PinaSEb+0x20>
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ffba 	bl	8000836 <_ZN3Pin5clearEv>
	      return v;
 80008c2:	78fb      	ldrb	r3, [r7, #3]
	  }
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_ZN3PineOEb>:

	  void operator^=(bool v)
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	  {
	     if (v)
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <_ZN3PineOEb+0x18>
	        toggle();
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffcf 	bl	8000882 <_ZN3Pin6toggleEv>
	  }
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_ZN3PincvbEv>:

	  operator bool() {return is_set();}
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ffae 	bl	8000856 <_ZN3Pin6is_setEv>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <HAL_CAN_RxFifo0MsgPendingCallback>:

//Interrupt interrupt_can_tx;
Interrupt interrupt_can_rx;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  interrupt_can_rx.interrupt();
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800090e:	f7ff fe0c 	bl	800052a <_ZN9Interrupt9interruptEv>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000160 	.word	0x20000160

08000920 <_ZN6DeviceC1ER4ADC_R3CANI5In_id6Out_idER3PinS8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_>:
	bool delay_{true};
	bool check{false};

public:

	Device(ADC_& adc, CAN<In_id, Out_id>& can, Pin& led_red, Pin& led_green, Pin& on, Pin& relay, Pin& relay_r, Pin& test, Pin& norma, Pin& fb_norma
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	603b      	str	r3, [r7, #0]
	     , Pin& first_level, Pin& fb_first, Pin& second_level, Pin& fb_second, Pin& KZ_plus, Pin& fb_KZ_plus
	     , Pin& KZ_minus, Pin& fb_KZ_minus)
	: adc {adc}, can {can}, led_red {led_red}, led_green{led_green}, on {on}, relay{relay}, relay_r{relay_r}, test{test}
	, norma{norma}, fb_norma{fb_norma}, first_level{first_level}, fb_first{fb_first}
	, second_level{second_level}, fb_second{fb_second}, KZ_plus{KZ_plus}, fb_KZ_plus{fb_KZ_plus}
	, KZ_minus{KZ_minus}, fb_KZ_minus{fb_KZ_minus}
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	69fa      	ldr	r2, [r7, #28]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6a3a      	ldr	r2, [r7, #32]
 8000950:	615a      	str	r2, [r3, #20]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000956:	619a      	str	r2, [r3, #24]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800095c:	61da      	str	r2, [r3, #28]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000962:	621a      	str	r2, [r3, #32]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800098c:	63da      	str	r2, [r3, #60]	; 0x3c
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000992:	641a      	str	r2, [r3, #64]	; 0x40
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000998:	645a      	str	r2, [r3, #68]	; 0x44
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3348      	adds	r3, #72	; 0x48
 800099e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fd1c 	bl	80003e0 <_ZN5TimerC1Em>
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3358      	adds	r3, #88	; 0x58
 80009ac:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fd15 	bl	80003e0 <_ZN5TimerC1Em>
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3368      	adds	r3, #104	; 0x68
 80009ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd0e 	bl	80003e0 <_ZN5TimerC1Em>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2201      	movs	r2, #1
 80009d0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	{
		relay = false; relay_r = false;
 80009dc:	2100      	movs	r1, #0
 80009de:	6a38      	ldr	r0, [r7, #32]
 80009e0:	f7ff ff5f 	bl	80008a2 <_ZN3PinaSEb>
 80009e4:	2100      	movs	r1, #0
 80009e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009e8:	f7ff ff5b 	bl	80008a2 <_ZN3PinaSEb>
	}
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_ZN6DeviceclEv>:



	void operator() (){
 80009f6:	b5b0      	push	{r4, r5, r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]

		if(delay_ and delay.done()) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d009      	beq.n	8000a1c <_ZN6DeviceclEv+0x26>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3358      	adds	r3, #88	; 0x58
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fd6d 	bl	80004ec <_ZN5Timer4doneEv>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZN6DeviceclEv+0x26>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <_ZN6DeviceclEv+0x28>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d008      	beq.n	8000a34 <_ZN6DeviceclEv+0x3e>
			delay.stop();
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3358      	adds	r3, #88	; 0x58
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd51 	bl	80004ce <_ZN5Timer4stopEv>
			delay_ = false;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		}

		relay_r = true;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff31 	bl	80008a2 <_ZN3PinaSEb>


		if(can.is_work()) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fe5c 	bl	8001702 <_ZN3CANI5In_id6Out_idE7is_workEv>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 812e 	beq.w	8000cae <_ZN6DeviceclEv+0x2b8>
			can.outID.state.HV_off = can.inID.control.HV_off;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	6852      	ldr	r2, [r2, #4]
 8000a5a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8000a5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a62:	b2d9      	uxtb	r1, r3
 8000a64:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8000a68:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a6c:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			can.outID.state.ignition = can.inID.control.ignition;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6852      	ldr	r2, [r2, #4]
 8000a78:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8000a7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a80:	b2d9      	uxtb	r1, r3
 8000a82:	f892 30ab 	ldrb.w	r3, [r2, #171]	; 0xab
 8000a86:	f361 0300 	bfi	r3, r1, #0, #1
 8000a8a:	f882 30ab 	strb.w	r3, [r2, #171]	; 0xab

			if(not delay_ and can.inID.control.HV_off and can.inID.control.ignition) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8277 	beq.w	8000f8e <_ZN6DeviceclEv+0x598>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8000aa8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 826d 	beq.w	8000f8e <_ZN6DeviceclEv+0x598>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8000abc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 8263 	beq.w	8000f8e <_ZN6DeviceclEv+0x598>

				if(can.inID.control.test) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8000ad0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <_ZN6DeviceclEv+0xec>
					check = true;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2201      	movs	r2, #1
 8000ade:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
				}

				if(check) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d051      	beq.n	8000b90 <_ZN6DeviceclEv+0x19a>
					on = true;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	2101      	movs	r1, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fed5 	bl	80008a2 <_ZN3PinaSEb>
					relay = true;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	2101      	movs	r1, #1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fecf 	bl	80008a2 <_ZN3PinaSEb>
					timer.stop();
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3348      	adds	r3, #72	; 0x48
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fce0 	bl	80004ce <_ZN5Timer4stopEv>
					if(adc.leak_first_level and adc.leak_second_level) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	333c      	adds	r3, #60	; 0x3c
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fe00 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00a      	beq.n	8000b36 <_ZN6DeviceclEv+0x140>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3348      	adds	r3, #72	; 0x48
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fdf7 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <_ZN6DeviceclEv+0x140>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <_ZN6DeviceclEv+0x142>
 8000b36:	2300      	movs	r3, #0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d014      	beq.n	8000b66 <_ZN6DeviceclEv+0x170>
						can.outID.state.test_OK = true;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
						can.outID.state.test_FAILED = false;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8000b54:	f36f 1386 	bfc	r3, #6, #1
 8000b58:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
						check = false;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8000b64:	e01a      	b.n	8000b9c <_ZN6DeviceclEv+0x1a6>
					} else {
						can.outID.state.test_OK = false;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8000b6e:	f36f 1345 	bfc	r3, #5, #1
 8000b72:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
						can.outID.state.test_FAILED = true;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8000b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b82:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
						check = false;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8000b8e:	e005      	b.n	8000b9c <_ZN6DeviceclEv+0x1a6>
					}
				} else {
			//		if(not timer.isCount()) timer.start();
			//		on ^= timer.event();
					relay = false;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe83 	bl	80008a2 <_ZN3PinaSEb>
				}

				on = true;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fe7d 	bl	80008a2 <_ZN3PinaSEb>
				on ? adc.start() : adc.stop();
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fe9d 	bl	80008ec <_ZN3PincvbEv>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <_ZN6DeviceclEv+0x1ce>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fdd5 	bl	800076c <_ZN4ADC_5startEv>
 8000bc2:	e004      	b.n	8000bce <_ZN6DeviceclEv+0x1d8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fddb 	bl	8000784 <_ZN4ADC_4stopEv>

				can.outID.state.test = check;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 107a 	ldrb.w	r1, [r3, #122]	; 0x7a
 8000bd8:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8000bdc:	f361 1304 	bfi	r3, r1, #4, #1
 8000be0:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa

				can.outID.state.kz_on_plus = adc.case_plus;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685c      	ldr	r4, [r3, #4]
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	f000 fd92 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8000bfe:	f362 0382 	bfi	r3, r2, #2, #1
 8000c02:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
				can.outID.state.kz_on_minus = adc.case_minus;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685c      	ldr	r4, [r3, #4]
 8000c12:	4610      	mov	r0, r2
 8000c14:	f000 fd81 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8000c20:	f362 03c3 	bfi	r3, r2, #3, #1
 8000c24:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa

				can.outID.state.level_first = adc.leak_first_level;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685c      	ldr	r4, [r3, #4]
 8000c34:	4610      	mov	r0, r2
 8000c36:	f000 fd70 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8000c42:	f362 0300 	bfi	r3, r2, #0, #1
 8000c46:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
				can.outID.state.level_second = adc.leak_second_level;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685c      	ldr	r4, [r3, #4]
 8000c56:	4610      	mov	r0, r2
 8000c58:	f000 fd5f 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8000c64:	f362 0341 	bfi	r3, r2, #1, #1
 8000c68:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa

				can.outID.state.leak_value = adc.lk_value();
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685c      	ldr	r4, [r3, #4]
 8000c74:	4610      	mov	r0, r2
 8000c76:	f7ff fd91 	bl	800079c <_ZN4ADC_8lk_valueEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
				can.outID.state.kz_value = adc.kz_value();
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685c      	ldr	r4, [r3, #4]
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f7ff fd92 	bl	80007b2 <_ZN4ADC_8kz_valueEv>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae

				led_green = true;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe01 	bl	80008a2 <_ZN3PinaSEb>
				led_red = false;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdfb 	bl	80008a2 <_ZN3PinaSEb>

			}

		}

	}
 8000cac:	e16f      	b.n	8000f8e <_ZN6DeviceclEv+0x598>
			if(not delay_) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8167 	beq.w	8000f8e <_ZN6DeviceclEv+0x598>
				if(test) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe11 	bl	80008ec <_ZN3PincvbEv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d011      	beq.n	8000cf4 <_ZN6DeviceclEv+0x2fe>
					on = true;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fde3 	bl	80008a2 <_ZN3PinaSEb>
					relay = true;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fddd 	bl	80008a2 <_ZN3PinaSEb>
					timer.stop();
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3348      	adds	r3, #72	; 0x48
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fbee 	bl	80004ce <_ZN5Timer4stopEv>
 8000cf2:	e005      	b.n	8000d00 <_ZN6DeviceclEv+0x30a>
					relay = false;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fdd1 	bl	80008a2 <_ZN3PinaSEb>
				on = true;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	2101      	movs	r1, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fdcb 	bl	80008a2 <_ZN3PinaSEb>
				on ? adc.start() : adc.stop();
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fdeb 	bl	80008ec <_ZN3PincvbEv>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <_ZN6DeviceclEv+0x332>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fd23 	bl	800076c <_ZN4ADC_5startEv>
 8000d26:	e004      	b.n	8000d32 <_ZN6DeviceclEv+0x33c>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd29 	bl	8000784 <_ZN4ADC_4stopEv>
				KZ_plus  = adc.case_plus;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3330      	adds	r3, #48	; 0x30
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fcec 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fdab 	bl	80008a2 <_ZN3PinaSEb>
				KZ_minus = adc.case_minus;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3324      	adds	r3, #36	; 0x24
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fcdf 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4620      	mov	r0, r4
 8000d62:	f7ff fd9e 	bl	80008a2 <_ZN3PinaSEb>
				first_level  = adc.leak_first_level;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	333c      	adds	r3, #60	; 0x3c
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fcd2 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff fd91 	bl	80008a2 <_ZN3PinaSEb>
				second_level = adc.leak_second_level;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3348      	adds	r3, #72	; 0x48
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fcc5 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff fd84 	bl	80008a2 <_ZN3PinaSEb>
				if(fb_norma ^ norma) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fda4 	bl	80008ec <_ZN3PincvbEv>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461c      	mov	r4, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fd9d 	bl	80008ec <_ZN3PincvbEv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	429c      	cmp	r4, r3
 8000db6:	bf14      	ite	ne
 8000db8:	2301      	movne	r3, #1
 8000dba:	2300      	moveq	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00a      	beq.n	8000dd8 <_ZN6DeviceclEv+0x3e2>
					norma = false;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fd6a 	bl	80008a2 <_ZN3PinaSEb>
					trigger = true;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000dd6:	e07f      	b.n	8000ed8 <_ZN6DeviceclEv+0x4e2>
				} else if(fb_first ^ first_level) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fd85 	bl	80008ec <_ZN3PincvbEv>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461c      	mov	r4, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fd7e 	bl	80008ec <_ZN3PincvbEv>
 8000df0:	4603      	mov	r3, r0
 8000df2:	429c      	cmp	r4, r3
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00a      	beq.n	8000e16 <_ZN6DeviceclEv+0x420>
					first_level = false;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fd4b 	bl	80008a2 <_ZN3PinaSEb>
					trigger = true;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000e14:	e060      	b.n	8000ed8 <_ZN6DeviceclEv+0x4e2>
				} else if(fb_second ^ second_level) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fd66 	bl	80008ec <_ZN3PincvbEv>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461c      	mov	r4, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fd5f 	bl	80008ec <_ZN3PincvbEv>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	429c      	cmp	r4, r3
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00a      	beq.n	8000e54 <_ZN6DeviceclEv+0x45e>
					second_level = false;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd2c 	bl	80008a2 <_ZN3PinaSEb>
					trigger = true;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000e52:	e041      	b.n	8000ed8 <_ZN6DeviceclEv+0x4e2>
				} else if(fb_KZ_plus ^ KZ_plus) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fd47 	bl	80008ec <_ZN3PincvbEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461c      	mov	r4, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fd40 	bl	80008ec <_ZN3PincvbEv>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	429c      	cmp	r4, r3
 8000e70:	bf14      	ite	ne
 8000e72:	2301      	movne	r3, #1
 8000e74:	2300      	moveq	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00a      	beq.n	8000e92 <_ZN6DeviceclEv+0x49c>
					KZ_plus = false;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fd0d 	bl	80008a2 <_ZN3PinaSEb>
					trigger = true;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000e90:	e022      	b.n	8000ed8 <_ZN6DeviceclEv+0x4e2>
				} else if(fb_KZ_minus ^ KZ_minus) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd28 	bl	80008ec <_ZN3PincvbEv>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fd21 	bl	80008ec <_ZN3PincvbEv>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	429c      	cmp	r4, r3
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00a      	beq.n	8000ed0 <_ZN6DeviceclEv+0x4da>
					KZ_minus = false;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fcee 	bl	80008a2 <_ZN3PinaSEb>
					trigger = true;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000ece:	e003      	b.n	8000ed8 <_ZN6DeviceclEv+0x4e2>
					trigger = false;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				if(not trigger)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000ede:	f083 0301 	eor.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d02e      	beq.n	8000f46 <_ZN6DeviceclEv+0x550>
					norma = not (adc.case_plus | adc.case_minus | adc.leak_first_level | adc.leak_second_level);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1d      	ldr	r5, [r3, #32]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3330      	adds	r3, #48	; 0x30
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fc11 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461c      	mov	r4, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3324      	adds	r3, #36	; 0x24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fc09 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4323      	orrs	r3, r4
 8000f0c:	b2dc      	uxtb	r4, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	333c      	adds	r3, #60	; 0x3c
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fc00 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4323      	orrs	r3, r4
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3348      	adds	r3, #72	; 0x48
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fbf7 	bl	800171a <_ZN10HysteresisIttEcvbEv>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4323      	orrs	r3, r4
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f7ff fcaf 	bl	80008a2 <_ZN3PinaSEb>
 8000f44:	e00b      	b.n	8000f5e <_ZN6DeviceclEv+0x568>
					norma ^= blink.event();
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1c      	ldr	r4, [r3, #32]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3368      	adds	r3, #104	; 0x68
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff faa3 	bl	800049a <_ZN5Timer5eventEv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4619      	mov	r1, r3
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff fcb7 	bl	80008cc <_ZN3PineOEb>
				led_red = trigger;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	f7ff fc99 	bl	80008a2 <_ZN3PinaSEb>
				led_green = not led_red;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68dc      	ldr	r4, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fcb7 	bl	80008ec <_ZN3PincvbEv>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f083 0301 	eor.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f7ff fc8a 	bl	80008a2 <_ZN3PinaSEb>
	}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8000f9e:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 ff1c 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f8da 	bl	800115c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f000 fa0e 	bl	80013c8 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000fac:	f000 f9ae 	bl	800130c <_ZL11MX_CAN_Initv>
  MX_ADC2_Init();
 8000fb0:	f000 f940 	bl	8001234 <_ZL12MX_ADC2_Initv>
//       , mcu::FLASH_::Sector::_30
//    >::make (&flash);

  // создание объектов

  decltype(auto) led_red     = Pin{GPIOB, LED_RED_Pin        };
 8000fb4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000fb8:	2202      	movs	r2, #2
 8000fba:	4962      	ldr	r1, [pc, #392]	; (8001144 <main+0x1ac>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fc17 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green   = Pin{GPIOB, LED_GREEN_Pin      };
 8000fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	495e      	ldr	r1, [pc, #376]	; (8001144 <main+0x1ac>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fc10 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) on          = Pin{GPIOC, ON_Pin             };
 8000fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	495c      	ldr	r1, [pc, #368]	; (8001148 <main+0x1b0>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fc09 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) relay       = Pin{GPIOC, RELAY_Pin          };
 8000fde:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	4958      	ldr	r1, [pc, #352]	; (8001148 <main+0x1b0>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fc02 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) relay_r     = Pin{GPIOC, RELAY_R_Pin        };
 8000fec:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	4955      	ldr	r1, [pc, #340]	; (8001148 <main+0x1b0>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fbfb 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can     = Pin{GPIOC, LED_CAN_Pin        };
 8000ffa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000ffe:	2201      	movs	r2, #1
 8001000:	4951      	ldr	r1, [pc, #324]	; (8001148 <main+0x1b0>)
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fbf4 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) test        = Pin{GPIOA, TEST_Pin           };
 8001008:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800100c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001010:	494e      	ldr	r1, [pc, #312]	; (800114c <main+0x1b4>)
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fbec 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
//  decltype(auto) res         = Pin{GPIOA, res_Pin            };
//  decltype(auto) fb_res      = Pin{GPIOC, fb_res_Pin         };
  decltype(auto) norma       = Pin{GPIOC, norma_Pin          };
 8001018:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800101c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001020:	4949      	ldr	r1, [pc, #292]	; (8001148 <main+0x1b0>)
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fbe4 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) fb_norma    = Pin{GPIOC, fb_norma_Pin       };
 8001028:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800102c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001030:	4945      	ldr	r1, [pc, #276]	; (8001148 <main+0x1b0>)
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fbdc 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) first_level = Pin{GPIOD, first_level_Pin    };
 8001038:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800103c:	2204      	movs	r2, #4
 800103e:	4944      	ldr	r1, [pc, #272]	; (8001150 <main+0x1b8>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fbd5 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) fb_first    = Pin{GPIOB, fb_first_level_Pin };
 8001046:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800104a:	2208      	movs	r2, #8
 800104c:	493d      	ldr	r1, [pc, #244]	; (8001144 <main+0x1ac>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fbce 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) second_level= Pin{GPIOB, second_level_Pin   };
 8001054:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001058:	2220      	movs	r2, #32
 800105a:	493a      	ldr	r1, [pc, #232]	; (8001144 <main+0x1ac>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fbc7 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) fb_second   = Pin{GPIOB, fb_second_level_Pin};
 8001062:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001066:	2210      	movs	r2, #16
 8001068:	4936      	ldr	r1, [pc, #216]	; (8001144 <main+0x1ac>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fbc0 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) KZ_plus     = Pin{GPIOB, KZ_plus_Pin        };
 8001070:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	4933      	ldr	r1, [pc, #204]	; (8001144 <main+0x1ac>)
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fbb9 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) fb_KZ_plus  = Pin{GPIOB, fb_KZ_plus_Pin     };
 800107e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	492f      	ldr	r1, [pc, #188]	; (8001144 <main+0x1ac>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fbb2 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) KZ_minus    = Pin{GPIOB, KZ_minus_Pin       };
 800108c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	492b      	ldr	r1, [pc, #172]	; (8001144 <main+0x1ac>)
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fbaa 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) fb_KZ_minus = Pin{GPIOB, fb_KZ_minus_Pin    };
 800109c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a4:	4927      	ldr	r1, [pc, #156]	; (8001144 <main+0x1ac>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fba2 	bl	80007f0 <_ZN3PinC1EP12GPIO_TypeDeft>

//  State state{};

  decltype(auto) adc = ADC_ {adc_injected_callback, 75};
 80010ac:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80010b0:	224b      	movs	r2, #75	; 0x4b
 80010b2:	4928      	ldr	r1, [pc, #160]	; (8001154 <main+0x1bc>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fac5 	bl	8000644 <_ZN4ADC_C1ER9Interruptt>

  decltype(auto) can = CAN<In_id, Out_id>{led_can, interrupt_can_rx, 100};
 80010ba:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 80010be:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <main+0x1c0>)
 80010c6:	f000 fb61 	bl	800178c <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>

  decltype(auto) device = Device{adc, can, led_red, led_green, on, relay, relay_r, test, norma, fb_norma, first_level, fb_first, second_level, fb_second, KZ_plus, fb_KZ_plus, KZ_minus, fb_KZ_minus};
 80010ca:	f507 7404 	add.w	r4, r7, #528	; 0x210
 80010ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80010d2:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 80010d6:	1d38      	adds	r0, r7, #4
 80010d8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010dc:	930e      	str	r3, [sp, #56]	; 0x38
 80010de:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80010e2:	930d      	str	r3, [sp, #52]	; 0x34
 80010e4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010e8:	930c      	str	r3, [sp, #48]	; 0x30
 80010ea:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80010ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80010f0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80010f4:	930a      	str	r3, [sp, #40]	; 0x28
 80010f6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80010fa:	9309      	str	r3, [sp, #36]	; 0x24
 80010fc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001100:	9308      	str	r3, [sp, #32]
 8001102:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001106:	9307      	str	r3, [sp, #28]
 8001108:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800110c:	9306      	str	r3, [sp, #24]
 800110e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001112:	9305      	str	r3, [sp, #20]
 8001114:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001118:	9304      	str	r3, [sp, #16]
 800111a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800111e:	9303      	str	r3, [sp, #12]
 8001120:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4623      	mov	r3, r4
 8001134:	f7ff fbf4 	bl	8000920 <_ZN6DeviceC1ER4ADC_R3CANI5In_id6Out_idER3PinS8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_S8_>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  device();
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fc5b 	bl	80009f6 <_ZN6DeviceclEv>
 8001140:	e7fa      	b.n	8001138 <main+0x1a0>
 8001142:	bf00      	nop
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40011000 	.word	0x40011000
 800114c:	40010800 	.word	0x40010800
 8001150:	40011400 	.word	0x40011400
 8001154:	2000015c 	.word	0x2000015c
 8001158:	20000160 	.word	0x20000160

0800115c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b096      	sub	sp, #88	; 0x58
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001166:	2228      	movs	r2, #40	; 0x28
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f99e 	bl	80044ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001190:	2301      	movs	r3, #1
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119e:	2301      	movs	r3, #1
 80011a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80011ac:	2300      	movs	r3, #0
 80011ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fc95 	bl	8003ae4 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <_Z18SystemClock_Configv+0x72>
  {
    Error_Handler();
 80011ca:	f000 f9c9 	bl	8001560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2101      	movs	r1, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fefa 	bl	8003fe4 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001200:	f000 f9ae 	bl	8001560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001204:	2302      	movs	r3, #2
 8001206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001208:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4618      	mov	r0, r3
 8001212:	f003 f84f 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8001226:	f000 f99b 	bl	8001560 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3758      	adds	r7, #88	; 0x58
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 800124e:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <_ZL12MX_ADC2_Initv+0xd4>)
 8001250:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 800125c:	2200      	movs	r2, #0
 800125e:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 8001262:	2200      	movs	r2, #0
 8001264:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 8001268:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800126c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 8001276:	2201      	movs	r2, #1
 8001278:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800127a:	4822      	ldr	r0, [pc, #136]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 800127c:	f000 fdfe 	bl	8001e7c <HAL_ADC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <_ZL12MX_ADC2_Initv+0x60>
  {
    Error_Handler();
 8001290:	f000 f966 	bl	8001560 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001294:	2304      	movs	r3, #4
 8001296:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80012a4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012a8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 80012bc:	f001 f93c 	bl	8002538 <HAL_ADCEx_InjectedConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <_ZL12MX_ADC2_Initv+0xa0>
  {
    Error_Handler();
 80012d0:	f000 f946 	bl	8001560 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80012d4:	2305      	movs	r3, #5
 80012d6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80012d8:	2302      	movs	r3, #2
 80012da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <_ZL12MX_ADC2_Initv+0xd0>)
 80012e2:	f001 f929 	bl	8002538 <HAL_ADCEx_InjectedConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <_ZL12MX_ADC2_Initv+0xc6>
  {
    Error_Handler();
 80012f6:	f000 f933 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000104 	.word	0x20000104
 8001308:	40012800 	.word	0x40012800

0800130c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001314:	4a2b      	ldr	r2, [pc, #172]	; (80013c4 <_ZL11MX_CAN_Initv+0xb8>)
 8001316:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 800131a:	2204      	movs	r2, #4
 800131c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 800132c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001330:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001334:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001338:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 800133c:	2200      	movs	r2, #0
 800133e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001342:	2201      	movs	r2, #1
 8001344:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001348:	2200      	movs	r2, #0
 800134a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 800134e:	2201      	movs	r2, #1
 8001350:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001354:	2200      	movs	r2, #0
 8001356:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 800135a:	2201      	movs	r2, #1
 800135c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 8001360:	f001 fa96 	bl	8002890 <HAL_CAN_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf14      	ite	ne
 800136a:	2301      	movne	r3, #1
 800136c:	2300      	moveq	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 8001374:	f000 f8f4 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001398:	2301      	movs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14; // how many filters to assign to the CAN1 (master can)
 800139c:	230e      	movs	r3, #14
 800139e:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 80013a6:	f001 fb6e 	bl	8002a86 <HAL_CAN_ConfigFilter>

  	HAL_CAN_Start(&hcan);
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 80013ac:	f001 fc34 	bl	8002c18 <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80013b0:	2102      	movs	r1, #2
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <_ZL11MX_CAN_Initv+0xb4>)
 80013b4:	f001 fe64 	bl	8003080 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000134 	.word	0x20000134
 80013c4:	40006400 	.word	0x40006400

080013c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013dc:	4b5b      	ldr	r3, [pc, #364]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a5a      	ldr	r2, [pc, #360]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 80013e2:	f043 0320 	orr.w	r3, r3, #32
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b58      	ldr	r3, [pc, #352]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	4b55      	ldr	r3, [pc, #340]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a54      	ldr	r2, [pc, #336]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b4f      	ldr	r3, [pc, #316]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b4c      	ldr	r3, [pc, #304]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b49      	ldr	r3, [pc, #292]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a48      	ldr	r2, [pc, #288]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <_ZL12MX_GPIO_Initv+0x184>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|ON_Pin|RELAY_Pin|RELAY_R_Pin
 800143c:	2200      	movs	r2, #0
 800143e:	f241 0127 	movw	r1, #4135	; 0x1027
 8001442:	4843      	ldr	r0, [pc, #268]	; (8001550 <_ZL12MX_GPIO_Initv+0x188>)
 8001444:	f002 fb1d 	bl	8003a82 <HAL_GPIO_WritePin>
                          |norma_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|second_level_Pin|KZ_plus_Pin
 8001448:	2200      	movs	r2, #0
 800144a:	f240 2163 	movw	r1, #611	; 0x263
 800144e:	4841      	ldr	r0, [pc, #260]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001450:	f002 fb17 	bl	8003a82 <HAL_GPIO_WritePin>
                          |KZ_minus_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(res_GPIO_Port, res_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145a:	483f      	ldr	r0, [pc, #252]	; (8001558 <_ZL12MX_GPIO_Initv+0x190>)
 800145c:	f002 fb11 	bl	8003a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(first_level_GPIO_Port, first_level_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2104      	movs	r1, #4
 8001464:	483d      	ldr	r0, [pc, #244]	; (800155c <_ZL12MX_GPIO_Initv+0x194>)
 8001466:	f002 fb0c 	bl	8003a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CAN_Pin ON_Pin RELAY_Pin RELAY_R_Pin
                           norma_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|ON_Pin|RELAY_Pin|RELAY_R_Pin
 800146a:	f241 0327 	movw	r3, #4135	; 0x1027
 800146e:	613b      	str	r3, [r7, #16]
                          |norma_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2302      	movs	r3, #2
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	4833      	ldr	r0, [pc, #204]	; (8001550 <_ZL12MX_GPIO_Initv+0x188>)
 8001484:	f002 f952 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001488:	2330      	movs	r3, #48	; 0x30
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148c:	2303      	movs	r3, #3
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	4830      	ldr	r0, [pc, #192]	; (8001558 <_ZL12MX_GPIO_Initv+0x190>)
 8001498:	f002 f948 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin second_level_Pin KZ_plus_Pin
                           KZ_minus_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|second_level_Pin|KZ_plus_Pin
 800149c:	f240 2363 	movw	r3, #611	; 0x263
 80014a0:	613b      	str	r3, [r7, #16]
                          |KZ_minus_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4619      	mov	r1, r3
 80014b4:	4827      	ldr	r0, [pc, #156]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 80014b6:	f002 f939 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80014ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	4822      	ldr	r0, [pc, #136]	; (8001558 <_ZL12MX_GPIO_Initv+0x190>)
 80014d0:	f002 f92c 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : res_Pin */
  GPIO_InitStruct.Pin = res_Pin;
 80014d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(res_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	481a      	ldr	r0, [pc, #104]	; (8001558 <_ZL12MX_GPIO_Initv+0x190>)
 80014ee:	f002 f91d 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : fb_res_Pin fb_norma_Pin */
  GPIO_InitStruct.Pin = fb_res_Pin|fb_norma_Pin;
 80014f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <_ZL12MX_GPIO_Initv+0x188>)
 8001508:	f002 f910 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : first_level_Pin */
  GPIO_InitStruct.Pin = first_level_Pin;
 800150c:	2304      	movs	r3, #4
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2302      	movs	r3, #2
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(first_level_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <_ZL12MX_GPIO_Initv+0x194>)
 8001524:	f002 f902 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : fb_first_level_Pin fb_second_level_Pin fb_KZ_plus_Pin fb_KZ_minus_Pin */
  GPIO_InitStruct.Pin = fb_first_level_Pin|fb_second_level_Pin|fb_KZ_plus_Pin|fb_KZ_minus_Pin;
 8001528:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 800153e:	f002 f8f5 	bl	800372c <HAL_GPIO_Init>

}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	40011000 	.word	0x40011000
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40010800 	.word	0x40010800
 800155c:	40011400 	.word	0x40011400

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>

0800156a <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	2b0b      	cmp	r3, #11
 800157a:	d808      	bhi.n	800158e <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	1c59      	adds	r1, r3, #1
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6311      	str	r1, [r2, #48]	; 0x30
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6839      	ldr	r1, [r7, #0]
 800158a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	73bb      	strb	r3, [r7, #14]
 80015aa:	7bba      	ldrb	r2, [r7, #14]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d20d      	bcs.n	80015d0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 80015b4:	7bba      	ldrb	r2, [r7, #14]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d102      	bne.n	80015c8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	73fb      	strb	r3, [r7, #15]
          break;
 80015c6:	e003      	b.n	80015d0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	3301      	adds	r3, #1
 80015cc:	73bb      	strb	r3, [r7, #14]
 80015ce:	e7ec      	b.n	80015aa <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	737b      	strb	r3, [r7, #13]
 80015d4:	7b7a      	ldrb	r2, [r7, #13]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	429a      	cmp	r2, r3
 80015dc:	d20c      	bcs.n	80015f8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	1c59      	adds	r1, r3, #1
 80015e2:	7b7a      	ldrb	r2, [r7, #13]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 80015f0:	7b7b      	ldrb	r3, [r7, #13]
 80015f2:	3301      	adds	r3, #1
 80015f4:	737b      	strb	r3, [r7, #13]
 80015f6:	e7ed      	b.n	80015d4 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 800165c:	f002 fe02 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8001660:	4603      	mov	r3, r0
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	3b01      	subs	r3, #1
 800166c:	4618      	mov	r0, r3
 800166e:	f002 f850 	bl	8003712 <HAL_SYSTICK_Config>
	}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	10624dd3 	.word	0x10624dd3

08001680 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	6011      	str	r1, [r2, #0]
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	fbb3 f2f2 	udiv	r2, r3, r2
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	fb01 f202 	mul.w	r2, r1, r2
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe febf 	bl	8000438 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_ZN10HysteresisIttEC1ERKtttb>:

template<class T, class U>
class Hysteresis
{
public:
    Hysteresis(const T& current, const U min, const U max, bool inverted = false)
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	4611      	mov	r1, r2
 80016ce:	461a      	mov	r2, r3
 80016d0:	460b      	mov	r3, r1
 80016d2:	80fb      	strh	r3, [r7, #6]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80bb      	strh	r3, [r7, #4]
        : current{current}, min{min}, max{max}, inverted{inverted}
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	809a      	strh	r2, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	88ba      	ldrh	r2, [r7, #4]
 80016e8:	80da      	strh	r2, [r3, #6]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	7e3a      	ldrb	r2, [r7, #24]
 80016ee:	721a      	strb	r2, [r3, #8]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	725a      	strb	r2, [r3, #9]
    {}
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_ZN3CANI5In_id6Out_idE7is_workEv>:
  bool is_work(){ return work; }
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <_ZN10HysteresisIttEcvbEv>:

    operator bool()
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
    {
        if(inverted) {
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7a1b      	ldrb	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d014      	beq.n	8001754 <_ZN10HysteresisIttEcvbEv+0x3a>
        	if (current >= max)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	881a      	ldrh	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	88db      	ldrh	r3, [r3, #6]
 8001734:	429a      	cmp	r2, r3
 8001736:	d302      	bcc.n	800173e <_ZN10HysteresisIttEcvbEv+0x24>
        	    state = false;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	725a      	strb	r2, [r3, #9]
        	if (current <= min)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	d817      	bhi.n	800177c <_ZN10HysteresisIttEcvbEv+0x62>
        	    state = true;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	725a      	strb	r2, [r3, #9]
 8001752:	e013      	b.n	800177c <_ZN10HysteresisIttEcvbEv+0x62>
        } else {
        	if (current >= max)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	881a      	ldrh	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	88db      	ldrh	r3, [r3, #6]
 800175e:	429a      	cmp	r2, r3
 8001760:	d302      	bcc.n	8001768 <_ZN10HysteresisIttEcvbEv+0x4e>
        	    state = true;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	725a      	strb	r2, [r3, #9]
        	if (current <= min)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d802      	bhi.n	800177c <_ZN10HysteresisIttEcvbEv+0x62>
        	    state = false;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	725a      	strb	r2, [r3, #9]
        }

        return state;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7a5b      	ldrb	r3, [r3, #9]
    }
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
	...

0800178c <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>:
  CAN(Pin& rts, Interrupt& rx_interrupt, uint16_t time_refresh)
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	807b      	strh	r3, [r7, #2]
  	  , time_refresh{time_refresh}
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe0d 	bl	80003bc <_ZN14TickSubscriberC1Ev>
 80017a2:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt+0x11c>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	33b4      	adds	r3, #180	; 0xb4
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f866 	bl	80018ac <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>
	  arInID[0] = arInID[1] = arInID[2] = arInID[3] = arInID[4] = arInID[5] = arInID[6] = arInID[7]= 0;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	  arOutID[0] = arOutID[1] = arOutID[2] = arOutID[3] = arOutID[4] = arOutID[5] = arOutID[6] = arOutID[7] = 0;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	  subscribed = false;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	711a      	strb	r2, [r3, #4]
  }
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	08004564 	.word	0x08004564

080018ac <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>:
      can_rx_interrupt (Parent& parent) : parent(parent) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe87 	bl	80005cc <_ZN12InterruptingC1Ev>
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_+0x38>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	605a      	str	r2, [r3, #4]
          parent.rx_interrupt.subscribe (this);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe1c 	bl	8000510 <_ZN9Interrupt9subscribeEP12Interrupting>
      }
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	08004570 	.word	0x08004570

080018e8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fe:	4293      	cmp	r3, r2
 8001900:	d102      	bne.n	8001908 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001904:	f7fe fcec 	bl	80002e0 <_ZN11TickUpdaterC1Ev>
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000094 	.word	0x20000094

08001914 <_ZN3CANI5In_id6Out_idE6notifyEv>:
  void notify() {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	  if (time++ >= time_refresh) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	b291      	uxth	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	f8a2 109c 	strh.w	r1, [r2, #156]	; 0x9c
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 8001932:	4293      	cmp	r3, r2
 8001934:	bf2c      	ite	cs
 8001936:	2301      	movcs	r3, #1
 8001938:	2300      	movcc	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <_ZN3CANI5In_id6Out_idE6notifyEv+0x3a>
		  time = 0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		  transmit();
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f81d 	bl	8001988 <_ZN3CANI5In_id6Out_idE8transmitEv>
	  if(inID.control.on_off) stop_transmit();
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001954:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <_ZN3CANI5In_id6Out_idE6notifyEv+0x50>
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f85e 	bl	8001a20 <_ZN3CANI5In_id6Out_idE13stop_transmitEv>
  }
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_ZN3CANI5In_id6Out_idE16can_rx_interrupt9interruptEv>:
      void interrupt() {parent.receive();}
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f861 	bl	8001a40 <_ZN3CANI5In_id6Out_idE7receiveEv>
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <_ZN3CANI5In_id6Out_idE8transmitEv>:
  void transmit(){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	  	rts = true;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe ff83 	bl	80008a2 <_ZN3PinaSEb>
		TxHeader.DLC = 8;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2208      	movs	r2, #8
 80019a0:	621a      	str	r2, [r3, #32]
		TxHeader.ExtId = 0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
		TxHeader.IDE = CAN_ID_STD;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
		TxHeader.StdId = ID;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		for (int i = 0; i < TxHeader.DLC; i++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1a      	ldr	r2, [r3, #32]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d90e      	bls.n	80019f2 <_ZN3CANI5In_id6Out_idE8transmitEv+0x6a>
			TxData[i] = arOutID[i];
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	33aa      	adds	r3, #170	; 0xaa
 80019dc:	7819      	ldrb	r1, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	3344      	adds	r3, #68	; 0x44
 80019e6:	460a      	mov	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TxHeader.DLC; i++) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e7eb      	b.n	80019ca <_ZN3CANI5In_id6Out_idE8transmitEv+0x42>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailBox);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0110 	add.w	r1, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3354      	adds	r3, #84	; 0x54
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <_ZN3CANI5In_id6Out_idE8transmitEv+0x94>)
 8001a04:	f001 f94c 	bl	8002ca0 <HAL_CAN_AddTxMessage>
		rts = false;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe ff47 	bl	80008a2 <_ZN3PinaSEb>
  }
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000134 	.word	0x20000134

08001a20 <_ZN3CANI5In_id6Out_idE13stop_transmitEv>:
  void stop_transmit() { unsubscribe(); work = false; }
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fca0 	bl	8000370 <_ZN14TickSubscriber11unsubscribeEv>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZN3CANI5In_id6Out_idE7receiveEv>:
  void receive(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	334c      	adds	r3, #76	; 0x4c
 8001a52:	2100      	movs	r1, #0
 8001a54:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <_ZN3CANI5In_id6Out_idE7receiveEv+0xa4>)
 8001a56:	f001 f9f2 	bl	8002e3e <HAL_CAN_GetRxMessage>
		switch(RxHeader.StdId) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b10      	cmp	r3, #16
 8001a60:	d027      	beq.n	8001ab2 <_ZN3CANI5In_id6Out_idE7receiveEv+0x72>
 8001a62:	2b17      	cmp	r3, #23
 8001a64:	d13a      	bne.n	8001adc <_ZN3CANI5In_id6Out_idE7receiveEv+0x9c>
				inID.control.ignition = RxData[0] & (1 << 1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2d9      	uxtb	r1, r3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	f892 30a2 	ldrb.w	r3, [r2, #162]	; 0xa2
 8001a80:	f361 0382 	bfi	r3, r1, #2, #1
 8001a84:	f882 30a2 	strb.w	r3, [r2, #162]	; 0xa2
				inID.control.HV_off   = RxData[0] & (1 << 6);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2d9      	uxtb	r1, r3
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	f892 30a2 	ldrb.w	r3, [r2, #162]	; 0xa2
 8001aa2:	f361 0341 	bfi	r3, r1, #1, #1
 8001aa6:	f882 30a2 	strb.w	r3, [r2, #162]	; 0xa2
				start_transmit();
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f81c 	bl	8001ae8 <_ZN3CANI5In_id6Out_idE14start_transmitEv>
			break;
 8001ab0:	e014      	b.n	8001adc <_ZN3CANI5In_id6Out_idE7receiveEv+0x9c>
				inID.control.test = RxData[0] & (1 << 0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2d9      	uxtb	r1, r3
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	f892 30a2 	ldrb.w	r3, [r2, #162]	; 0xa2
 8001acc:	f361 0300 	bfi	r3, r1, #0, #1
 8001ad0:	f882 30a2 	strb.w	r3, [r2, #162]	; 0xa2
				start_transmit();
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f807 	bl	8001ae8 <_ZN3CANI5In_id6Out_idE14start_transmitEv>
			break;
 8001ada:	bf00      	nop
	}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000134 	.word	0x20000134

08001ae8 <_ZN3CANI5In_id6Out_idE14start_transmitEv>:
  void start_transmit() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
		if (not work) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00c      	beq.n	8001b1a <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
			work = true;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
			if (time_refresh > 0)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
				subscribe();
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fc11 	bl	800033c <_ZN14TickSubscriber9subscribeEv>
  }
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_GLOBAL__sub_I_systemtick>:
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fedc 	bl	80018e8 <_Z41__static_initialization_and_destruction_0ii>
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_MspInit+0x60>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_MspInit+0x60>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000

08001b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_ADC_MspInit+0x7c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d129      	bne.n	8001c0c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_ADC_MspInit+0x80>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_ADC_MspInit+0x80>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_ADC_MspInit+0x80>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_ADC_MspInit+0x80>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_ADC_MspInit+0x80>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_ADC_MspInit+0x80>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001be8:	2330      	movs	r3, #48	; 0x30
 8001bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bec:	2303      	movs	r3, #3
 8001bee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <HAL_ADC_MspInit+0x84>)
 8001bf8:	f001 fd98 	bl	800372c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2012      	movs	r0, #18
 8001c02:	f001 fd5c 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c06:	2012      	movs	r0, #18
 8001c08:	f001 fd75 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40012800 	.word	0x40012800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <HAL_CAN_MspInit+0x9c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d139      	bne.n	8001cb4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_CAN_MspInit+0xa0>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_CAN_MspInit+0xa0>)
 8001c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	61d3      	str	r3, [r2, #28]
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_CAN_MspInit+0xa0>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_CAN_MspInit+0xa0>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_CAN_MspInit+0xa0>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_CAN_MspInit+0xa0>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <HAL_CAN_MspInit+0xa4>)
 8001c86:	f001 fd51 	bl	800372c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <HAL_CAN_MspInit+0xa4>)
 8001ca0:	f001 fd44 	bl	800372c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2014      	movs	r0, #20
 8001caa:	f001 fd08 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001cae:	2014      	movs	r0, #20
 8001cb0:	f001 fd21 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40006400 	.word	0x40006400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010800 	.word	0x40010800

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <NMI_Handler+0x4>

08001cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0e:	f7fe fb0b 	bl	8000328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <ADC1_2_IRQHandler+0x10>)
 8001d1e:	f000 f997 	bl	8002050 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000104 	.word	0x20000104

08001d2c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d32:	f001 f9ca 	bl	80030ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000134 	.word	0x20000134

08001d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	return 1;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <_kill>:

int _kill(int pid, int sig)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d58:	f002 fb7e 	bl	8004458 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2216      	movs	r2, #22
 8001d60:	601a      	str	r2, [r3, #0]
	return -1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_exit>:

void _exit (int status)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d76:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffe7 	bl	8001d4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d80:	e7fe      	b.n	8001d80 <_exit+0x12>

08001d82 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d90:	f7ff fff7 	bl	8001d82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d96:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dac:	4c09      	ldr	r4, [pc, #36]	; (8001dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dba:	f002 fb53 	bl	8004464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dbe:	f7ff f8eb 	bl	8000f98 <main>
  bx lr
 8001dc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dcc:	080045ec 	.word	0x080045ec
  ldr r2, =_sbss
 8001dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001dd4:	2000016c 	.word	0x2000016c

08001dd8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC3_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_Init+0x28>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_Init+0x28>)
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f001 fc5b 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fe9c 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 fc73 	bl	8003712 <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f001 fc3b 	bl	80036be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000164 	.word	0x20000164

08001e7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0ce      	b.n	800203c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fe6c 	bl	8001b98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f9f1 	bl	80022a8 <ADC_ConversionStop_Disable>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 80a9 	bne.w	800202a <HAL_ADC_Init+0x1ae>
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 80a5 	bne.w	800202a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee8:	f023 0302 	bic.w	r3, r3, #2
 8001eec:	f043 0202 	orr.w	r2, r3, #2
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4951      	ldr	r1, [pc, #324]	; (8002044 <HAL_ADC_Init+0x1c8>)
 8001efe:	428b      	cmp	r3, r1
 8001f00:	d10a      	bne.n	8001f18 <HAL_ADC_Init+0x9c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f0a:	d002      	beq.n	8001f12 <HAL_ADC_Init+0x96>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	e004      	b.n	8001f1c <HAL_ADC_Init+0xa0>
 8001f12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f16:	e001      	b.n	8001f1c <HAL_ADC_Init+0xa0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7b1b      	ldrb	r3, [r3, #12]
 8001f22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f34:	d003      	beq.n	8001f3e <HAL_ADC_Init+0xc2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_ADC_Init+0xc8>
 8001f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f42:	e000      	b.n	8001f46 <HAL_ADC_Init+0xca>
 8001f44:	2300      	movs	r3, #0
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7d1b      	ldrb	r3, [r3, #20]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d119      	bne.n	8001f88 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7b1b      	ldrb	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	035a      	lsls	r2, r3, #13
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e00b      	b.n	8001f88 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_ADC_Init+0x1cc>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb8:	d003      	beq.n	8001fc2 <HAL_ADC_Init+0x146>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d104      	bne.n	8001fcc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_ADC_Init+0x1d0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002006:	e018      	b.n	800203a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f023 0312 	bic.w	r3, r3, #18
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002028:	e007      	b.n	800203a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40013c00 	.word	0x40013c00
 8002048:	ffe1f7fd 	.word	0xffe1f7fd
 800204c:	ff1f0efe 	.word	0xff1f0efe

08002050 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03e      	beq.n	80020f0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d039      	beq.n	80020f0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800209e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020a2:	d11d      	bne.n	80020e0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d119      	bne.n	80020e0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0220 	bic.w	r2, r2, #32
 80020ba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f874 	bl	80021ce <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0212 	mvn.w	r2, #18
 80020ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04d      	beq.n	8002196 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d048      	beq.n	8002196 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002126:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800212a:	d012      	beq.n	8002152 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002136:	2b00      	cmp	r3, #0
 8002138:	d125      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002144:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002148:	d11d      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d119      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002160:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fb1e 	bl	80007c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 020c 	mvn.w	r2, #12
 8002194:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f812 	bl	80021e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0201 	mvn.w	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
	...

080021f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d040      	beq.n	8002294 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <ADC_Enable+0xac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <ADC_Enable+0xb0>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	0c9b      	lsrs	r3, r3, #18
 800222e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002230:	e002      	b.n	8002238 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800223e:	f7ff fe13 	bl	8001e68 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002244:	e01f      	b.n	8002286 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002246:	f7ff fe0f 	bl	8001e68 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d918      	bls.n	8002286 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d011      	beq.n	8002286 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e007      	b.n	8002296 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d1d8      	bne.n	8002246 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000
 80022a4:	431bde83 	.word	0x431bde83

080022a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12e      	bne.n	8002320 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d2:	f7ff fdc9 	bl	8001e68 <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022d8:	e01b      	b.n	8002312 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022da:	f7ff fdc5 	bl	8001e68 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d914      	bls.n	8002312 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10d      	bne.n	8002312 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e007      	b.n	8002322 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d0dc      	beq.n	80022da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e078      	b.n	8002438 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff50 	bl	80021f4 <ADC_Enable>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d167      	bne.n	800242e <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a32      	ldr	r2, [pc, #200]	; (8002440 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d105      	bne.n	8002388 <HAL_ADCEx_InjectedStart_IT+0x5c>
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
 8002394:	e005      	b.n	80023a2 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0204 	mvn.w	r2, #4
 80023c4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d4:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d128      	bne.n	8002436 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80023ee:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80023f2:	d113      	bne.n	800241c <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d105      	bne.n	800240a <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	e00c      	b.n	8002436 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e003      	b.n	8002436 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40012800 	.word	0x40012800
 8002444:	40012400 	.word	0x40012400

08002448 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_ADCEx_InjectedStop_IT+0x1a>
 800245e:	2302      	movs	r3, #2
 8002460:	e038      	b.n	80024d4 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d121      	bne.n	80024ba <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11a      	bne.n	80024ba <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff0f 	bl	80022a8 <ADC_ConversionStop_Disable>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11a      	bne.n	80024ca <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 80024b8:	e007      	b.n	80024ca <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f043 0220 	orr.w	r2, r3, #32
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d009      	beq.n	8002504 <HAL_ADCEx_InjectedGetValue+0x28>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d815      	bhi.n	8002522 <HAL_ADCEx_InjectedGetValue+0x46>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d00d      	beq.n	8002518 <HAL_ADCEx_InjectedGetValue+0x3c>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d005      	beq.n	800250e <HAL_ADCEx_InjectedGetValue+0x32>
 8002502:	e00e      	b.n	8002522 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	60fb      	str	r3, [r7, #12]
      break;
 800250c:	e00e      	b.n	800252c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	60fb      	str	r3, [r7, #12]
      break;
 8002516:	e009      	b.n	800252c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	60fb      	str	r3, [r7, #12]
      break;
 8002520:	e004      	b.n	800252c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	60fb      	str	r3, [r7, #12]
      break;
 800252a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 800252c:	68fb      	ldr	r3, [r7, #12]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002538:	b490      	push	{r4, r7}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8002554:	2302      	movs	r3, #2
 8002556:	e18d      	b.n	8002874 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d119      	bne.n	800259c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10c      	bne.n	800258a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	0d9b      	lsrs	r3, r3, #22
 8002578:	059b      	lsls	r3, r3, #22
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	03d1      	lsls	r1, r2, #15
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6393      	str	r3, [r2, #56]	; 0x38
 8002588:	e04f      	b.n	800262a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e046      	b.n	800262a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d82a      	bhi.n	80025fe <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	330f      	adds	r3, #15
 80025c0:	221f      	movs	r2, #31
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4019      	ands	r1, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	0518      	lsls	r0, r3, #20
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	1ad2      	subs	r2, r2, r3
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	330f      	adds	r3, #15
 80025ec:	fa04 f303 	lsl.w	r3, r4, r3
 80025f0:	ea40 0203 	orr.w	r2, r0, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
 80025fc:	e015      	b.n	800262a <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	1ad2      	subs	r2, r2, r3
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	330f      	adds	r3, #15
 8002616:	221f      	movs	r2, #31
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002620:	43da      	mvns	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	400a      	ands	r2, r1
 8002628:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d01c      	beq.n	8002672 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	498d      	ldr	r1, [pc, #564]	; (8002880 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800264c:	428a      	cmp	r2, r1
 800264e:	d10a      	bne.n	8002666 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6992      	ldr	r2, [r2, #24]
 8002654:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8002658:	d002      	beq.n	8002660 <HAL_ADCEx_InjectedConfigChannel+0x128>
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	6992      	ldr	r2, [r2, #24]
 800265e:	e004      	b.n	800266a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8002660:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002664:	e001      	b.n	800266a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	6992      	ldr	r2, [r2, #24]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	6809      	ldr	r1, [r1, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	7d5b      	ldrb	r3, [r3, #21]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d115      	bne.n	80026a6 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002682:	d108      	bne.n	8002696 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	e007      	b.n	80026a6 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7d1b      	ldrb	r3, [r3, #20]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d114      	bne.n	80026d8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7d5b      	ldrb	r3, [r3, #21]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	e007      	b.n	80026d8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d91c      	bls.n	800271a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4019      	ands	r1, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6898      	ldr	r0, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	3b1e      	subs	r3, #30
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e019      	b.n	800274e <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	2207      	movs	r2, #7
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	4019      	ands	r1, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6898      	ldr	r0, [r3, #8]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d003      	beq.n	800275e <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800275a:	2b11      	cmp	r3, #17
 800275c:	d107      	bne.n	800276e <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800276c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d022      	beq.n	80027bc <HAL_ADCEx_InjectedConfigChannel+0x284>
 8002776:	2b03      	cmp	r3, #3
 8002778:	d82e      	bhi.n	80027d8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 800277a:	2b01      	cmp	r3, #1
 800277c:	d002      	beq.n	8002784 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 800277e:	2b02      	cmp	r3, #2
 8002780:	d00e      	beq.n	80027a0 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8002782:	e029      	b.n	80027d8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800278e:	f023 030f 	bic.w	r3, r3, #15
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	68d1      	ldr	r1, [r2, #12]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	430b      	orrs	r3, r1
 800279c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800279e:	e029      	b.n	80027f4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027aa:	f023 030f 	bic.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	68d1      	ldr	r1, [r2, #12]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 80027ba:	e01b      	b.n	80027f4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027c6:	f023 030f 	bic.w	r3, r3, #15
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	68d1      	ldr	r1, [r2, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	430b      	orrs	r3, r1
 80027d4:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80027d6:	e00d      	b.n	80027f4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027e2:	f023 030f 	bic.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	68d1      	ldr	r1, [r2, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	430b      	orrs	r3, r1
 80027f0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80027f2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d003      	beq.n	8002804 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002800:	2b11      	cmp	r3, #17
 8002802:	d132      	bne.n	800286a <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d125      	bne.n	800285a <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d126      	bne.n	800286a <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800282a:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b10      	cmp	r3, #16
 8002832:	d11a      	bne.n	800286a <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9a      	lsrs	r2, r3, #18
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800284a:	e002      	b.n	8002852 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3b01      	subs	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f9      	bne.n	800284c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002858:	e007      	b.n	800286a <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bc90      	pop	{r4, r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40013c00 	.word	0x40013c00
 8002884:	40012400 	.word	0x40012400
 8002888:	20000000 	.word	0x20000000
 800288c:	431bde83 	.word	0x431bde83

08002890 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0ed      	b.n	8002a7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff f9b6 	bl	8001c20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7ff fad0 	bl	8001e68 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ca:	e012      	b.n	80028f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028cc:	f7ff facc 	bl	8001e68 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b0a      	cmp	r3, #10
 80028d8:	d90b      	bls.n	80028f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2205      	movs	r2, #5
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0c5      	b.n	8002a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0e5      	beq.n	80028cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0202 	bic.w	r2, r2, #2
 800290e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002910:	f7ff faaa 	bl	8001e68 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002916:	e012      	b.n	800293e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002918:	f7ff faa6 	bl	8001e68 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b0a      	cmp	r3, #10
 8002924:	d90b      	bls.n	800293e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2205      	movs	r2, #5
 8002936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e09f      	b.n	8002a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7e1b      	ldrb	r3, [r3, #24]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d108      	bne.n	8002966 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e007      	b.n	8002976 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7e5b      	ldrb	r3, [r3, #25]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e007      	b.n	80029a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7e9b      	ldrb	r3, [r3, #26]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d108      	bne.n	80029ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0220 	orr.w	r2, r2, #32
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e007      	b.n	80029ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0220 	bic.w	r2, r2, #32
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7edb      	ldrb	r3, [r3, #27]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0210 	bic.w	r2, r2, #16
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e007      	b.n	80029f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0210 	orr.w	r2, r2, #16
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7f1b      	ldrb	r3, [r3, #28]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d108      	bne.n	8002a0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e007      	b.n	8002a1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0208 	bic.w	r2, r2, #8
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7f5b      	ldrb	r3, [r3, #29]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d108      	bne.n	8002a38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0204 	orr.w	r2, r2, #4
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e007      	b.n	8002a48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0204 	bic.w	r2, r2, #4
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	ea42 0103 	orr.w	r1, r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d003      	beq.n	8002aac <HAL_CAN_ConfigFilter+0x26>
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	f040 80aa 	bne.w	8002c00 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d123      	bne.n	8002b2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	401a      	ands	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3248      	adds	r2, #72	; 0x48
 8002b0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b24:	6979      	ldr	r1, [r7, #20]
 8002b26:	3348      	adds	r3, #72	; 0x48
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d122      	bne.n	8002b7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3248      	adds	r2, #72	; 0x48
 8002b5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b72:	6979      	ldr	r1, [r7, #20]
 8002b74:	3348      	adds	r3, #72	; 0x48
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b96:	e007      	b.n	8002ba8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002bc2:	e007      	b.n	8002bd4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bf2:	f023 0201 	bic.w	r2, r3, #1
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e006      	b.n	8002c0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d12e      	bne.n	8002c8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c44:	f7ff f910 	bl	8001e68 <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c4a:	e012      	b.n	8002c72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c4c:	f7ff f90c 	bl	8001e68 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b0a      	cmp	r3, #10
 8002c58:	d90b      	bls.n	8002c72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2205      	movs	r2, #5
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e012      	b.n	8002c98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e006      	b.n	8002c98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d003      	beq.n	8002ccc <HAL_CAN_AddTxMessage+0x2c>
 8002cc4:	7ffb      	ldrb	r3, [r7, #31]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	f040 80ad 	bne.w	8002e26 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8095 	beq.w	8002e16 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	0e1b      	lsrs	r3, r3, #24
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	6809      	ldr	r1, [r1, #0]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	440b      	add	r3, r1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e00f      	b.n	8002d44 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d2e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d38:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3318      	adds	r3, #24
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	440b      	add	r3, r1
 8002d42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3318      	adds	r3, #24
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	440b      	add	r3, r1
 8002d54:	3304      	adds	r3, #4
 8002d56:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	7d1b      	ldrb	r3, [r3, #20]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d111      	bne.n	8002d84 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3318      	adds	r3, #24
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	6811      	ldr	r1, [r2, #0]
 8002d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3318      	adds	r3, #24
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	440b      	add	r3, r1
 8002d80:	3304      	adds	r3, #4
 8002d82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3307      	adds	r3, #7
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	061a      	lsls	r2, r3, #24
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3306      	adds	r3, #6
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3305      	adds	r3, #5
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	3204      	adds	r2, #4
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	4610      	mov	r0, r2
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	6811      	ldr	r1, [r2, #0]
 8002dac:	ea43 0200 	orr.w	r2, r3, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	440b      	add	r3, r1
 8002db6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002dba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	061a      	lsls	r2, r3, #24
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	7812      	ldrb	r2, [r2, #0]
 8002ddc:	4610      	mov	r0, r2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6811      	ldr	r1, [r2, #0]
 8002de2:	ea43 0200 	orr.w	r2, r3, r0
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	440b      	add	r3, r1
 8002dec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002df0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3318      	adds	r3, #24
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	4413      	add	r3, r2
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	6811      	ldr	r1, [r2, #0]
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	440b      	add	r3, r1
 8002e10:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e00e      	b.n	8002e34 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e006      	b.n	8002e34 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3724      	adds	r7, #36	; 0x24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e52:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d003      	beq.n	8002e62 <HAL_CAN_GetRxMessage+0x24>
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	f040 8103 	bne.w	8003068 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10e      	bne.n	8002e86 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0f7      	b.n	8003076 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0e8      	b.n	8003076 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	331b      	adds	r3, #27
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0204 	and.w	r2, r3, #4
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	331b      	adds	r3, #27
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0d5b      	lsrs	r3, r3, #21
 8002ed2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e00b      	b.n	8002ef4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	331b      	adds	r3, #27
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	331b      	adds	r3, #27
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	4413      	add	r3, r2
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0202 	and.w	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	331b      	adds	r3, #27
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	e00b      	b.n	8002f42 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	331b      	adds	r3, #27
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	331b      	adds	r3, #27
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	331b      	adds	r3, #27
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0a1a      	lsrs	r2, r3, #8
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0c1a      	lsrs	r2, r3, #16
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e1a      	lsrs	r2, r3, #24
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	3303      	adds	r3, #3
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0a1a      	lsrs	r2, r3, #8
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	3305      	adds	r3, #5
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	4413      	add	r3, r2
 8003012:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0c1a      	lsrs	r2, r3, #16
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	3306      	adds	r3, #6
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e1a      	lsrs	r2, r3, #24
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	3307      	adds	r3, #7
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0220 	orr.w	r2, r2, #32
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	e007      	b.n	8003064 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0220 	orr.w	r2, r2, #32
 8003062:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e006      	b.n	8003076 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003090:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d002      	beq.n	800309e <HAL_CAN_ActivateNotification+0x1e>
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d109      	bne.n	80030b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6959      	ldr	r1, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e006      	b.n	80030c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b08a      	sub	sp, #40	; 0x28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d07c      	beq.n	800320a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d023      	beq.n	8003162 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f983 	bl	8003438 <HAL_CAN_TxMailbox0CompleteCallback>
 8003132:	e016      	b.n	8003162 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e00c      	b.n	8003162 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	e002      	b.n	8003162 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f986 	bl	800346e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d024      	beq.n	80031b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003174:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f962 	bl	800344a <HAL_CAN_TxMailbox1CompleteCallback>
 8003186:	e016      	b.n	80031b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
 800319a:	e00c      	b.n	80031b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e002      	b.n	80031b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f965 	bl	8003480 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d024      	beq.n	800320a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f941 	bl	800345c <HAL_CAN_TxMailbox2CompleteCallback>
 80031da:	e016      	b.n	800320a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	e00c      	b.n	800320a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	e002      	b.n	800320a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f944 	bl	8003492 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00c      	beq.n	800322e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2210      	movs	r2, #16
 800322c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2208      	movs	r2, #8
 8003248:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f92a 	bl	80034a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fd fb4b 	bl	8000904 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2210      	movs	r2, #16
 8003290:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2208      	movs	r2, #8
 80032ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f90a 	bl	80034c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8f2 	bl	80034b6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2210      	movs	r2, #16
 80032ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8f3 	bl	80034da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2208      	movs	r2, #8
 800330e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f8eb 	bl	80034ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d07b      	beq.n	8003418 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d072      	beq.n	8003410 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003384:	2b00      	cmp	r3, #0
 8003386:	d043      	beq.n	8003410 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800338e:	2b00      	cmp	r3, #0
 8003390:	d03e      	beq.n	8003410 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003398:	2b60      	cmp	r3, #96	; 0x60
 800339a:	d02b      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x32a>
 800339c:	2b60      	cmp	r3, #96	; 0x60
 800339e:	d82e      	bhi.n	80033fe <HAL_CAN_IRQHandler+0x334>
 80033a0:	2b50      	cmp	r3, #80	; 0x50
 80033a2:	d022      	beq.n	80033ea <HAL_CAN_IRQHandler+0x320>
 80033a4:	2b50      	cmp	r3, #80	; 0x50
 80033a6:	d82a      	bhi.n	80033fe <HAL_CAN_IRQHandler+0x334>
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d019      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x316>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d826      	bhi.n	80033fe <HAL_CAN_IRQHandler+0x334>
 80033b0:	2b30      	cmp	r3, #48	; 0x30
 80033b2:	d010      	beq.n	80033d6 <HAL_CAN_IRQHandler+0x30c>
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	d822      	bhi.n	80033fe <HAL_CAN_IRQHandler+0x334>
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d002      	beq.n	80033c2 <HAL_CAN_IRQHandler+0x2f8>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d005      	beq.n	80033cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033c0:	e01d      	b.n	80033fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f043 0308 	orr.w	r3, r3, #8
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033ca:	e019      	b.n	8003400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	f043 0310 	orr.w	r3, r3, #16
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033d4:	e014      	b.n	8003400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f043 0320 	orr.w	r3, r3, #32
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033de:	e00f      	b.n	8003400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033e8:	e00a      	b.n	8003400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033f2:	e005      	b.n	8003400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033fc:	e000      	b.n	8003400 <HAL_CAN_IRQHandler+0x336>
            break;
 80033fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800340e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2204      	movs	r2, #4
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f867 	bl	80034fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003430:	bf00      	nop
 8003432:	3728      	adds	r7, #40	; 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800352c:	4013      	ands	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800353c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003542:	4a04      	ldr	r2, [pc, #16]	; (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60d3      	str	r3, [r2, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <__NVIC_GetPriorityGrouping+0x18>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	f003 0307 	and.w	r3, r3, #7
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	2b00      	cmp	r3, #0
 8003584:	db0b      	blt.n	800359e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	4906      	ldr	r1, [pc, #24]	; (80035a8 <__NVIC_EnableIRQ+0x34>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2001      	movs	r0, #1
 8003596:	fa00 f202 	lsl.w	r2, r0, r2
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	; (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	; (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
         );
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	; 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f7ff ff90 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff2d 	bl	8003510 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff42 	bl	8003558 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff90 	bl	8003600 <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5f 	bl	80035ac <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff35 	bl	8003574 <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa2 	bl	8003664 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800372c:	b480      	push	{r7}
 800372e:	b08b      	sub	sp, #44	; 0x2c
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373e:	e179      	b.n	8003a34 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003740:	2201      	movs	r2, #1
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	429a      	cmp	r2, r3
 800375a:	f040 8168 	bne.w	8003a2e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4aa0      	ldr	r2, [pc, #640]	; (80039e4 <HAL_GPIO_Init+0x2b8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d05e      	beq.n	8003826 <HAL_GPIO_Init+0xfa>
 8003768:	4a9e      	ldr	r2, [pc, #632]	; (80039e4 <HAL_GPIO_Init+0x2b8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d875      	bhi.n	800385a <HAL_GPIO_Init+0x12e>
 800376e:	4a9e      	ldr	r2, [pc, #632]	; (80039e8 <HAL_GPIO_Init+0x2bc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d058      	beq.n	8003826 <HAL_GPIO_Init+0xfa>
 8003774:	4a9c      	ldr	r2, [pc, #624]	; (80039e8 <HAL_GPIO_Init+0x2bc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d86f      	bhi.n	800385a <HAL_GPIO_Init+0x12e>
 800377a:	4a9c      	ldr	r2, [pc, #624]	; (80039ec <HAL_GPIO_Init+0x2c0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d052      	beq.n	8003826 <HAL_GPIO_Init+0xfa>
 8003780:	4a9a      	ldr	r2, [pc, #616]	; (80039ec <HAL_GPIO_Init+0x2c0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d869      	bhi.n	800385a <HAL_GPIO_Init+0x12e>
 8003786:	4a9a      	ldr	r2, [pc, #616]	; (80039f0 <HAL_GPIO_Init+0x2c4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d04c      	beq.n	8003826 <HAL_GPIO_Init+0xfa>
 800378c:	4a98      	ldr	r2, [pc, #608]	; (80039f0 <HAL_GPIO_Init+0x2c4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d863      	bhi.n	800385a <HAL_GPIO_Init+0x12e>
 8003792:	4a98      	ldr	r2, [pc, #608]	; (80039f4 <HAL_GPIO_Init+0x2c8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d046      	beq.n	8003826 <HAL_GPIO_Init+0xfa>
 8003798:	4a96      	ldr	r2, [pc, #600]	; (80039f4 <HAL_GPIO_Init+0x2c8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d85d      	bhi.n	800385a <HAL_GPIO_Init+0x12e>
 800379e:	2b12      	cmp	r3, #18
 80037a0:	d82a      	bhi.n	80037f8 <HAL_GPIO_Init+0xcc>
 80037a2:	2b12      	cmp	r3, #18
 80037a4:	d859      	bhi.n	800385a <HAL_GPIO_Init+0x12e>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_GPIO_Init+0x80>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	08003827 	.word	0x08003827
 80037b0:	08003801 	.word	0x08003801
 80037b4:	08003813 	.word	0x08003813
 80037b8:	08003855 	.word	0x08003855
 80037bc:	0800385b 	.word	0x0800385b
 80037c0:	0800385b 	.word	0x0800385b
 80037c4:	0800385b 	.word	0x0800385b
 80037c8:	0800385b 	.word	0x0800385b
 80037cc:	0800385b 	.word	0x0800385b
 80037d0:	0800385b 	.word	0x0800385b
 80037d4:	0800385b 	.word	0x0800385b
 80037d8:	0800385b 	.word	0x0800385b
 80037dc:	0800385b 	.word	0x0800385b
 80037e0:	0800385b 	.word	0x0800385b
 80037e4:	0800385b 	.word	0x0800385b
 80037e8:	0800385b 	.word	0x0800385b
 80037ec:	0800385b 	.word	0x0800385b
 80037f0:	08003809 	.word	0x08003809
 80037f4:	0800381d 	.word	0x0800381d
 80037f8:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <HAL_GPIO_Init+0x2cc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037fe:	e02c      	b.n	800385a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	623b      	str	r3, [r7, #32]
          break;
 8003806:	e029      	b.n	800385c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	3304      	adds	r3, #4
 800380e:	623b      	str	r3, [r7, #32]
          break;
 8003810:	e024      	b.n	800385c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	3308      	adds	r3, #8
 8003818:	623b      	str	r3, [r7, #32]
          break;
 800381a:	e01f      	b.n	800385c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	330c      	adds	r3, #12
 8003822:	623b      	str	r3, [r7, #32]
          break;
 8003824:	e01a      	b.n	800385c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800382e:	2304      	movs	r3, #4
 8003830:	623b      	str	r3, [r7, #32]
          break;
 8003832:	e013      	b.n	800385c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800383c:	2308      	movs	r3, #8
 800383e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	611a      	str	r2, [r3, #16]
          break;
 8003846:	e009      	b.n	800385c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003848:	2308      	movs	r3, #8
 800384a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	615a      	str	r2, [r3, #20]
          break;
 8003852:	e003      	b.n	800385c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003854:	2300      	movs	r3, #0
 8003856:	623b      	str	r3, [r7, #32]
          break;
 8003858:	e000      	b.n	800385c <HAL_GPIO_Init+0x130>
          break;
 800385a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2bff      	cmp	r3, #255	; 0xff
 8003860:	d801      	bhi.n	8003866 <HAL_GPIO_Init+0x13a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	e001      	b.n	800386a <HAL_GPIO_Init+0x13e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2bff      	cmp	r3, #255	; 0xff
 8003870:	d802      	bhi.n	8003878 <HAL_GPIO_Init+0x14c>
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	e002      	b.n	800387e <HAL_GPIO_Init+0x152>
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	3b08      	subs	r3, #8
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	210f      	movs	r1, #15
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	431a      	orrs	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80c1 	beq.w	8003a2e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_GPIO_Init+0x2d0>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_GPIO_Init+0x2d0>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6193      	str	r3, [r2, #24]
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_GPIO_Init+0x2d0>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038c4:	4a4e      	ldr	r2, [pc, #312]	; (8003a00 <HAL_GPIO_Init+0x2d4>)
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	220f      	movs	r2, #15
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a46      	ldr	r2, [pc, #280]	; (8003a04 <HAL_GPIO_Init+0x2d8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d01f      	beq.n	8003930 <HAL_GPIO_Init+0x204>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a45      	ldr	r2, [pc, #276]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d019      	beq.n	800392c <HAL_GPIO_Init+0x200>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a44      	ldr	r2, [pc, #272]	; (8003a0c <HAL_GPIO_Init+0x2e0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_GPIO_Init+0x1fc>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a43      	ldr	r2, [pc, #268]	; (8003a10 <HAL_GPIO_Init+0x2e4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00d      	beq.n	8003924 <HAL_GPIO_Init+0x1f8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a42      	ldr	r2, [pc, #264]	; (8003a14 <HAL_GPIO_Init+0x2e8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <HAL_GPIO_Init+0x1f4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a41      	ldr	r2, [pc, #260]	; (8003a18 <HAL_GPIO_Init+0x2ec>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_GPIO_Init+0x1f0>
 8003918:	2305      	movs	r3, #5
 800391a:	e00a      	b.n	8003932 <HAL_GPIO_Init+0x206>
 800391c:	2306      	movs	r3, #6
 800391e:	e008      	b.n	8003932 <HAL_GPIO_Init+0x206>
 8003920:	2304      	movs	r3, #4
 8003922:	e006      	b.n	8003932 <HAL_GPIO_Init+0x206>
 8003924:	2303      	movs	r3, #3
 8003926:	e004      	b.n	8003932 <HAL_GPIO_Init+0x206>
 8003928:	2302      	movs	r3, #2
 800392a:	e002      	b.n	8003932 <HAL_GPIO_Init+0x206>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_GPIO_Init+0x206>
 8003930:	2300      	movs	r3, #0
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	f002 0203 	and.w	r2, r2, #3
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	4093      	lsls	r3, r2
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003942:	492f      	ldr	r1, [pc, #188]	; (8003a00 <HAL_GPIO_Init+0x2d4>)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800395c:	4b2f      	ldr	r3, [pc, #188]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	492e      	ldr	r1, [pc, #184]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	608b      	str	r3, [r1, #8]
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	43db      	mvns	r3, r3
 8003972:	492a      	ldr	r1, [pc, #168]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 8003974:	4013      	ands	r3, r2
 8003976:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	4924      	ldr	r1, [pc, #144]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	60cb      	str	r3, [r1, #12]
 8003990:	e006      	b.n	80039a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	43db      	mvns	r3, r3
 800399a:	4920      	ldr	r1, [pc, #128]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 800399c:	4013      	ands	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	491a      	ldr	r1, [pc, #104]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	604b      	str	r3, [r1, #4]
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d025      	beq.n	8003a20 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4910      	ldr	r1, [pc, #64]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
 80039e0:	e025      	b.n	8003a2e <HAL_GPIO_Init+0x302>
 80039e2:	bf00      	nop
 80039e4:	10320000 	.word	0x10320000
 80039e8:	10310000 	.word	0x10310000
 80039ec:	10220000 	.word	0x10220000
 80039f0:	10210000 	.word	0x10210000
 80039f4:	10120000 	.word	0x10120000
 80039f8:	10110000 	.word	0x10110000
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40010800 	.word	0x40010800
 8003a08:	40010c00 	.word	0x40010c00
 8003a0c:	40011000 	.word	0x40011000
 8003a10:	40011400 	.word	0x40011400
 8003a14:	40011800 	.word	0x40011800
 8003a18:	40011c00 	.word	0x40011c00
 8003a1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_GPIO_Init+0x324>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	4909      	ldr	r1, [pc, #36]	; (8003a50 <HAL_GPIO_Init+0x324>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	3301      	adds	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f47f ae7e 	bne.w	8003740 <HAL_GPIO_Init+0x14>
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	372c      	adds	r7, #44	; 0x2c
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	40010400 	.word	0x40010400

08003a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e001      	b.n	8003a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	807b      	strh	r3, [r7, #2]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a92:	787b      	ldrb	r3, [r7, #1]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a98:	887a      	ldrh	r2, [r7, #2]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a9e:	e003      	b.n	8003aa8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	041a      	lsls	r2, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	611a      	str	r2, [r3, #16]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	041a      	lsls	r2, r3, #16
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43d9      	mvns	r1, r3
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e26c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8087 	beq.w	8003c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b04:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d00c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b10:	4b8f      	ldr	r3, [pc, #572]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d112      	bne.n	8003b42 <HAL_RCC_OscConfig+0x5e>
 8003b1c:	4b8c      	ldr	r3, [pc, #560]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2a:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d06c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x12c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d168      	bne.n	8003c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e246      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x76>
 8003b4c:	4b80      	ldr	r3, [pc, #512]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7f      	ldr	r2, [pc, #508]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e02e      	b.n	8003bb8 <HAL_RCC_OscConfig+0xd4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x98>
 8003b62:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7a      	ldr	r2, [pc, #488]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b78      	ldr	r3, [pc, #480]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a77      	ldr	r2, [pc, #476]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e01d      	b.n	8003bb8 <HAL_RCC_OscConfig+0xd4>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xbc>
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a71      	ldr	r2, [pc, #452]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b6f      	ldr	r3, [pc, #444]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6e      	ldr	r2, [pc, #440]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0xd4>
 8003ba0:	4b6b      	ldr	r3, [pc, #428]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6a      	ldr	r2, [pc, #424]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a67      	ldr	r2, [pc, #412]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d013      	beq.n	8003be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fe f952 	bl	8001e68 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fe f94e 	bl	8001e68 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1fa      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b5d      	ldr	r3, [pc, #372]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0xe4>
 8003be6:	e014      	b.n	8003c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe f93e 	bl	8001e68 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe f93a 	bl	8001e68 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1e6      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x10c>
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d063      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c2a:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d11c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x18c>
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d116      	bne.n	8003c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_RCC_OscConfig+0x176>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e1ba      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4939      	ldr	r1, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	e03a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe f8f3 	bl	8001e68 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c86:	f7fe f8ef 	bl	8001e68 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e19b      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4927      	ldr	r1, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fe f8d2 	bl	8001e68 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe f8ce 	bl	8001e68 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e17a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d03a      	beq.n	8003d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d019      	beq.n	8003d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fe f8b2 	bl	8001e68 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fe f8ae 	bl	8001e68 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e15a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f000 faa6 	bl	8004278 <RCC_Delay>
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d34:	f7fe f898 	bl	8001e68 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3a:	e00f      	b.n	8003d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fe f894 	bl	8001e68 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d908      	bls.n	8003d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e140      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	42420000 	.word	0x42420000
 8003d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b9e      	ldr	r3, [pc, #632]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e9      	bne.n	8003d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a6 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b97      	ldr	r3, [pc, #604]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4b94      	ldr	r3, [pc, #592]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a93      	ldr	r2, [pc, #588]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d90:	61d3      	str	r3, [r2, #28]
 8003d92:	4b91      	ldr	r3, [pc, #580]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b8e      	ldr	r3, [pc, #568]	; (8003fdc <HAL_RCC_OscConfig+0x4f8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d118      	bne.n	8003de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dae:	4b8b      	ldr	r3, [pc, #556]	; (8003fdc <HAL_RCC_OscConfig+0x4f8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a8a      	ldr	r2, [pc, #552]	; (8003fdc <HAL_RCC_OscConfig+0x4f8>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dba:	f7fe f855 	bl	8001e68 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fe f851 	bl	8001e68 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	; 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0fd      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <HAL_RCC_OscConfig+0x4f8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x312>
 8003de8:	4b7b      	ldr	r3, [pc, #492]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a7a      	ldr	r2, [pc, #488]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6213      	str	r3, [r2, #32]
 8003df4:	e02d      	b.n	8003e52 <HAL_RCC_OscConfig+0x36e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x334>
 8003dfe:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a75      	ldr	r2, [pc, #468]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6213      	str	r3, [r2, #32]
 8003e0a:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a72      	ldr	r2, [pc, #456]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6213      	str	r3, [r2, #32]
 8003e16:	e01c      	b.n	8003e52 <HAL_RCC_OscConfig+0x36e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d10c      	bne.n	8003e3a <HAL_RCC_OscConfig+0x356>
 8003e20:	4b6d      	ldr	r3, [pc, #436]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4a6c      	ldr	r2, [pc, #432]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6213      	str	r3, [r2, #32]
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4a69      	ldr	r2, [pc, #420]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6213      	str	r3, [r2, #32]
 8003e38:	e00b      	b.n	8003e52 <HAL_RCC_OscConfig+0x36e>
 8003e3a:	4b67      	ldr	r3, [pc, #412]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4a66      	ldr	r2, [pc, #408]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	6213      	str	r3, [r2, #32]
 8003e46:	4b64      	ldr	r3, [pc, #400]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	4a63      	ldr	r2, [pc, #396]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d015      	beq.n	8003e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5a:	f7fe f805 	bl	8001e68 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fe f801 	bl	8001e68 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0ab      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	4b57      	ldr	r3, [pc, #348]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCC_OscConfig+0x37e>
 8003e84:	e014      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e86:	f7fd ffef 	bl	8001e68 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd ffeb 	bl	8001e68 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e095      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea4:	4b4c      	ldr	r3, [pc, #304]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ee      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d105      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4a47      	ldr	r2, [pc, #284]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8081 	beq.w	8003fce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ecc:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d061      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d146      	bne.n	8003f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b3f      	ldr	r3, [pc, #252]	; (8003fe0 <HAL_RCC_OscConfig+0x4fc>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fd ffbf 	bl	8001e68 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fd ffbb 	bl	8001e68 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e067      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d108      	bne.n	8003f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f16:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	492d      	ldr	r1, [pc, #180]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a19      	ldr	r1, [r3, #32]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	4927      	ldr	r1, [pc, #156]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <HAL_RCC_OscConfig+0x4fc>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd ff8f 	bl	8001e68 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd ff8b 	bl	8001e68 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e037      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x46a>
 8003f6c:	e02f      	b.n	8003fce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_RCC_OscConfig+0x4fc>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fd ff78 	bl	8001e68 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd ff74 	bl	8001e68 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e020      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x498>
 8003f9a:	e018      	b.n	8003fce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e013      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_OscConfig+0x4f4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	42420060 	.word	0x42420060

08003fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0d0      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d910      	bls.n	8004028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b67      	ldr	r3, [pc, #412]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 0207 	bic.w	r2, r3, #7
 800400e:	4965      	ldr	r1, [pc, #404]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800404a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d040      	beq.n	8004104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d115      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e073      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06b      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c2:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f023 0203 	bic.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4936      	ldr	r1, [pc, #216]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d4:	f7fd fec8 	bl	8001e68 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040dc:	f7fd fec4 	bl	8001e68 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e053      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 020c 	and.w	r2, r3, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	429a      	cmp	r2, r3
 8004102:	d1eb      	bne.n	80040dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d210      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 0207 	bic.w	r2, r3, #7
 800411a:	4922      	ldr	r1, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490a      	ldr	r1, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1cc>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd fe38 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40022000 	.word	0x40022000
 80041a8:	40021000 	.word	0x40021000
 80041ac:	080045bc 	.word	0x080045bc
 80041b0:	20000000 	.word	0x20000000
 80041b4:	20000004 	.word	0x20000004

080041b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCC_GetSysClockFreq+0x94>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d002      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x30>
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x36>
 80041e6:	e027      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ea:	613b      	str	r3, [r7, #16]
      break;
 80041ec:	e027      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0c9b      	lsrs	r3, r3, #18
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	4a17      	ldr	r2, [pc, #92]	; (8004254 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_RCC_GetSysClockFreq+0x94>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	0c5b      	lsrs	r3, r3, #17
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	4a11      	ldr	r2, [pc, #68]	; (8004258 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <HAL_RCC_GetSysClockFreq+0x98>)
 800421a:	fb02 f203 	mul.w	r2, r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e004      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a0c      	ldr	r2, [pc, #48]	; (800425c <HAL_RCC_GetSysClockFreq+0xa4>)
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	613b      	str	r3, [r7, #16]
      break;
 8004236:	e002      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa8>)
 800423a:	613b      	str	r3, [r7, #16]
      break;
 800423c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423e:	693b      	ldr	r3, [r7, #16]
}
 8004240:	4618      	mov	r0, r3
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	00f42400 	.word	0x00f42400
 8004254:	080045cc 	.word	0x080045cc
 8004258:	080045dc 	.word	0x080045dc
 800425c:	003d0900 	.word	0x003d0900
 8004260:	007a1200 	.word	0x007a1200

08004264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b02      	ldr	r3, [pc, #8]	; (8004274 <HAL_RCC_GetHCLKFreq+0x10>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	20000000 	.word	0x20000000

08004278 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <RCC_Delay+0x34>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <RCC_Delay+0x38>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0a5b      	lsrs	r3, r3, #9
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004294:	bf00      	nop
  }
  while (Delay --);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1e5a      	subs	r2, r3, #1
 800429a:	60fa      	str	r2, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f9      	bne.n	8004294 <RCC_Delay+0x1c>
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	20000000 	.word	0x20000000
 80042b0:	10624dd3 	.word	0x10624dd3

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d07d      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d4:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10d      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	61d3      	str	r3, [r2, #28]
 80042ec:	4b49      	ldr	r3, [pc, #292]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b46      	ldr	r3, [pc, #280]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d118      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004308:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a42      	ldr	r2, [pc, #264]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004314:	f7fd fda8 	bl	8001e68 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	e008      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fd fda4 	bl	8001e68 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e06d      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432e:	4b3a      	ldr	r3, [pc, #232]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02e      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	429a      	cmp	r2, r3
 8004356:	d027      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004358:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004360:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004362:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800436e:	4a29      	ldr	r2, [pc, #164]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d014      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fd fd73 	bl	8001e68 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	e00a      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fd fd6f 	bl	8001e68 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e036      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ee      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4917      	ldr	r1, [pc, #92]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	490b      	ldr	r1, [pc, #44]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4904      	ldr	r1, [pc, #16]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
 800441c:	42420440 	.word	0x42420440

08004420 <__cxa_pure_virtual>:
 8004420:	b508      	push	{r3, lr}
 8004422:	f000 f80d 	bl	8004440 <_ZSt9terminatev>

08004426 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004426:	b508      	push	{r3, lr}
 8004428:	4780      	blx	r0
 800442a:	f000 f80e 	bl	800444a <abort>
	...

08004430 <_ZSt13get_terminatev>:
 8004430:	4b02      	ldr	r3, [pc, #8]	; (800443c <_ZSt13get_terminatev+0xc>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	f3bf 8f5b 	dmb	ish
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	2000000c 	.word	0x2000000c

08004440 <_ZSt9terminatev>:
 8004440:	b508      	push	{r3, lr}
 8004442:	f7ff fff5 	bl	8004430 <_ZSt13get_terminatev>
 8004446:	f7ff ffee 	bl	8004426 <_ZN10__cxxabiv111__terminateEPFvvE>

0800444a <abort>:
 800444a:	2006      	movs	r0, #6
 800444c:	b508      	push	{r3, lr}
 800444e:	f000 f85d 	bl	800450c <raise>
 8004452:	2001      	movs	r0, #1
 8004454:	f7fd fc8b 	bl	8001d6e <_exit>

08004458 <__errno>:
 8004458:	4b01      	ldr	r3, [pc, #4]	; (8004460 <__errno+0x8>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000010 	.word	0x20000010

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	2600      	movs	r6, #0
 8004468:	4d0c      	ldr	r5, [pc, #48]	; (800449c <__libc_init_array+0x38>)
 800446a:	4c0d      	ldr	r4, [pc, #52]	; (80044a0 <__libc_init_array+0x3c>)
 800446c:	1b64      	subs	r4, r4, r5
 800446e:	10a4      	asrs	r4, r4, #2
 8004470:	42a6      	cmp	r6, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	f000 f866 	bl	8004544 <_init>
 8004478:	2600      	movs	r6, #0
 800447a:	4d0a      	ldr	r5, [pc, #40]	; (80044a4 <__libc_init_array+0x40>)
 800447c:	4c0a      	ldr	r4, [pc, #40]	; (80044a8 <__libc_init_array+0x44>)
 800447e:	1b64      	subs	r4, r4, r5
 8004480:	10a4      	asrs	r4, r4, #2
 8004482:	42a6      	cmp	r6, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f855 3b04 	ldr.w	r3, [r5], #4
 800448c:	4798      	blx	r3
 800448e:	3601      	adds	r6, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f855 3b04 	ldr.w	r3, [r5], #4
 8004496:	4798      	blx	r3
 8004498:	3601      	adds	r6, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	080045e0 	.word	0x080045e0
 80044a0:	080045e0 	.word	0x080045e0
 80044a4:	080045e0 	.word	0x080045e0
 80044a8:	080045e8 	.word	0x080045e8

080044ac <memset>:
 80044ac:	4603      	mov	r3, r0
 80044ae:	4402      	add	r2, r0
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d100      	bne.n	80044b6 <memset+0xa>
 80044b4:	4770      	bx	lr
 80044b6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ba:	e7f9      	b.n	80044b0 <memset+0x4>

080044bc <_raise_r>:
 80044bc:	291f      	cmp	r1, #31
 80044be:	b538      	push	{r3, r4, r5, lr}
 80044c0:	4604      	mov	r4, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	d904      	bls.n	80044d0 <_raise_r+0x14>
 80044c6:	2316      	movs	r3, #22
 80044c8:	6003      	str	r3, [r0, #0]
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80044d2:	b112      	cbz	r2, 80044da <_raise_r+0x1e>
 80044d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044d8:	b94b      	cbnz	r3, 80044ee <_raise_r+0x32>
 80044da:	4620      	mov	r0, r4
 80044dc:	f000 f830 	bl	8004540 <_getpid_r>
 80044e0:	462a      	mov	r2, r5
 80044e2:	4601      	mov	r1, r0
 80044e4:	4620      	mov	r0, r4
 80044e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ea:	f000 b817 	b.w	800451c <_kill_r>
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d00a      	beq.n	8004508 <_raise_r+0x4c>
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	d103      	bne.n	80044fe <_raise_r+0x42>
 80044f6:	2316      	movs	r3, #22
 80044f8:	6003      	str	r3, [r0, #0]
 80044fa:	2001      	movs	r0, #1
 80044fc:	e7e7      	b.n	80044ce <_raise_r+0x12>
 80044fe:	2400      	movs	r4, #0
 8004500:	4628      	mov	r0, r5
 8004502:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004506:	4798      	blx	r3
 8004508:	2000      	movs	r0, #0
 800450a:	e7e0      	b.n	80044ce <_raise_r+0x12>

0800450c <raise>:
 800450c:	4b02      	ldr	r3, [pc, #8]	; (8004518 <raise+0xc>)
 800450e:	4601      	mov	r1, r0
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	f7ff bfd3 	b.w	80044bc <_raise_r>
 8004516:	bf00      	nop
 8004518:	20000010 	.word	0x20000010

0800451c <_kill_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	2300      	movs	r3, #0
 8004520:	4d06      	ldr	r5, [pc, #24]	; (800453c <_kill_r+0x20>)
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	f7fd fc10 	bl	8001d4e <_kill>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	d102      	bne.n	8004538 <_kill_r+0x1c>
 8004532:	682b      	ldr	r3, [r5, #0]
 8004534:	b103      	cbz	r3, 8004538 <_kill_r+0x1c>
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	bd38      	pop	{r3, r4, r5, pc}
 800453a:	bf00      	nop
 800453c:	20000168 	.word	0x20000168

08004540 <_getpid_r>:
 8004540:	f7fd bbfe 	b.w	8001d40 <_getpid>

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr
